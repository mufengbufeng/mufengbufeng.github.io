<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>YooAsset源码阅读-资源加载与卸载</title>
    <link href="/2025/08/25/YooAsset_Code_Reading_Resource_Loading_and_Unloading/"/>
    <url>/2025/08/25/YooAsset_Code_Reading_Resource_Loading_and_Unloading/</url>
    
    <content type="html"><![CDATA[<h1 id="YooAsset源码阅读-资源加载卸载"><a href="#YooAsset源码阅读-资源加载卸载" class="headerlink" title="YooAsset源码阅读-资源加载卸载"></a>YooAsset源码阅读-资源加载卸载</h1><p>继续 YooAsset 的源码研究，本文将详细分析资源加载系统的核心机制，包括ResourcePackage、ResourceManager以及各种资源加载Provider的工作原理。</p><h2 id="资源加载系统架构概述"><a href="#资源加载系统架构概述" class="headerlink" title="资源加载系统架构概述"></a>资源加载系统架构概述</h2><p>YooAsset的资源加载系统采用分层架构设计，主要包含以下核心组件：</p><h3 id="核心组件关系图"><a href="#核心组件关系图" class="headerlink" title="核心组件关系图"></a>核心组件关系图</h3><pre><code class="mermaid">graph TB    A[ResourcePackage资源包裹入口] --> B[ResourceManager资源管理器]    B --> C[ProviderOperation提供者基类]    C --> D[AssetProvider单资源提供者]    C --> E[SubAssetsProvider子资源提供者]    C --> F[AllAssetsProvider所有资源提供者]    C --> G[RawFileProvider原生文件提供者]    C --> H[SceneProvider场景提供者]        B --> I[LoadBundleFileOperation Bundle加载器]    I --> J[BundleInfo Bundle信息]    J --> K[FileSystem文件系统]        D --> L[AssetHandle资源句柄]    E --> M[SubAssetsHandle子资源句柄]    F --> N[AllAssetsHandle所有资源句柄]    G --> O[RawFileHandle原生文件句柄]    H --> P[SceneHandle场景句柄]    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style I fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style J fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style L fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style M fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style N fill:#74b9ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style O fill:#e17055,stroke:#ffffff,stroke-width:3px,color:#ffffff    style P fill:#81ecec,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h2 id="ResourcePackage-资源包裹入口"><a href="#ResourcePackage-资源包裹入口" class="headerlink" title="ResourcePackage - 资源包裹入口"></a>ResourcePackage - 资源包裹入口</h2><p>ResourcePackage 是用户接触资源加载的主要入口点，它提供了统一的资源加载接口。</p><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ul><li>ResourcePackage.cs (Line 8-1209)</li><li>ResourceManager.cs</li><li>AssetInfo.cs</li></ul><h3 id="核心加载方法分析"><a href="#核心加载方法分析" class="headerlink" title="核心加载方法分析"></a>核心加载方法分析</h3><p>ResourcePackage 提供了四种主要的资源加载方式：</p><h4 id="1-LoadAssetAsync-单资源加载"><a href="#1-LoadAssetAsync-单资源加载" class="headerlink" title="1. LoadAssetAsync - 单资源加载"></a>1. LoadAssetAsync - 单资源加载</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 689-732</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AssetHandle <span class="hljs-title">LoadAssetAsync</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">uint</span> priority = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    <span class="hljs-keyword">return</span> LoadAssetInternal(assetInfo, <span class="hljs-literal">false</span>, priority);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> AssetHandle <span class="hljs-title">LoadAssetInternal</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">bool</span> waitForAsyncComplete, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    DebugCheckAssetLoadType(assetInfo.AssetType);<br>    assetInfo.LoadMethod = AssetInfo.ELoadMethod.LoadAsset;<br>    <span class="hljs-keyword">var</span> handle = _resourceManager.LoadAssetAsync(assetInfo, priority);<br>    <span class="hljs-keyword">if</span> (waitForAsyncComplete)<br>        handle.WaitForAsyncComplete();<br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-LoadSubAssetsAsync-子资源加载"><a href="#2-LoadSubAssetsAsync-子资源加载" class="headerlink" title="2. LoadSubAssetsAsync - 子资源加载"></a>2. LoadSubAssetsAsync - 子资源加载</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 799-853</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SubAssetsHandle <span class="hljs-title">LoadSubAssetsAsync</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">uint</span> priority = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    <span class="hljs-keyword">return</span> LoadSubAssetsInternal(assetInfo, <span class="hljs-literal">false</span>, priority);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> SubAssetsHandle <span class="hljs-title">LoadSubAssetsInternal</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">bool</span> waitForAsyncComplete, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    DebugCheckAssetLoadType(assetInfo.AssetType);<br>    assetInfo.LoadMethod = AssetInfo.ELoadMethod.LoadSubAssets;<br>    <span class="hljs-keyword">var</span> handle = _resourceManager.LoadSubAssetsAsync(assetInfo, priority);<br>    <span class="hljs-keyword">if</span> (waitForAsyncComplete)<br>        handle.WaitForAsyncComplete();<br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-LoadAllAssetsAsync-加载包内所有资源"><a href="#3-LoadAllAssetsAsync-加载包内所有资源" class="headerlink" title="3. LoadAllAssetsAsync - 加载包内所有资源"></a>3. LoadAllAssetsAsync - 加载包内所有资源</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 909-963</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AllAssetsHandle <span class="hljs-title">LoadAllAssetsAsync</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">uint</span> priority = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    <span class="hljs-keyword">return</span> LoadAllAssetsInternal(assetInfo, <span class="hljs-literal">false</span>, priority);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> AllAssetsHandle <span class="hljs-title">LoadAllAssetsInternal</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">bool</span> waitForAsyncComplete, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    DebugCheckAssetLoadType(assetInfo.AssetType);<br>    assetInfo.LoadMethod = AssetInfo.ELoadMethod.LoadAllAssets;<br>    <span class="hljs-keyword">var</span> handle = _resourceManager.LoadAllAssetsAsync(assetInfo, priority);<br>    <span class="hljs-keyword">if</span> (waitForAsyncComplete)<br>        handle.WaitForAsyncComplete();<br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-LoadRawFileAsync-原生文件加载"><a href="#4-LoadRawFileAsync-原生文件加载" class="headerlink" title="4. LoadRawFileAsync - 原生文件加载"></a>4. LoadRawFileAsync - 原生文件加载</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 540-566</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RawFileHandle <span class="hljs-title">LoadRawFileAsync</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">uint</span> priority = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    <span class="hljs-keyword">return</span> LoadRawFileInternal(assetInfo, <span class="hljs-literal">false</span>, priority);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> RawFileHandle <span class="hljs-title">LoadRawFileInternal</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">bool</span> waitForAsyncComplete, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    assetInfo.LoadMethod = AssetInfo.ELoadMethod.LoadRawFile;<br>    <span class="hljs-keyword">var</span> handle = _resourceManager.LoadRawFileAsync(assetInfo, priority);<br>    <span class="hljs-keyword">if</span> (waitForAsyncComplete)<br>        handle.WaitForAsyncComplete();<br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="资源加载方法对比"><a href="#资源加载方法对比" class="headerlink" title="资源加载方法对比"></a>资源加载方法对比</h3><table><thead><tr><th>加载方法</th><th>用途</th><th>返回类型</th><th>典型场景</th></tr></thead><tbody><tr><td>LoadAssetAsync</td><td>加载单个主资源</td><td>AssetHandle</td><td>纹理、音频、Prefab等</td></tr><tr><td>LoadSubAssetsAsync</td><td>加载子资源</td><td>SubAssetsHandle</td><td>Atlas中的Sprite、FBX中的网格等</td></tr><tr><td>LoadAllAssetsAsync</td><td>加载包内所有资源</td><td>AllAssetsHandle</td><td>批量加载整个资源包</td></tr><tr><td>LoadRawFileAsync</td><td>加载原生文件</td><td>RawFileHandle</td><td>配置文件、二进制数据等</td></tr></tbody></table><h2 id="ResourceManager-资源管理核心"><a href="#ResourceManager-资源管理核心" class="headerlink" title="ResourceManager - 资源管理核心"></a>ResourceManager - 资源管理核心</h2><p>ResourceManager 是资源加载系统的核心管理器，负责Provider的创建、管理和Bundle加载器的协调。</p><h3 id="关键数据结构"><a href="#关键数据结构" class="headerlink" title="关键数据结构"></a>关键数据结构</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 12-21</span><br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">readonly</span> Dictionary&lt;<span class="hljs-built_in">string</span>, ProviderOperation&gt; ProviderDic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, ProviderOperation&gt;(<span class="hljs-number">5000</span>);<br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">readonly</span> Dictionary&lt;<span class="hljs-built_in">string</span>, LoadBundleFileOperation&gt; LoaderDic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, LoadBundleFileOperation&gt;(<span class="hljs-number">5000</span>);<br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">readonly</span> List&lt;SceneHandle&gt; SceneHandles = <span class="hljs-keyword">new</span> List&lt;SceneHandle&gt;(<span class="hljs-number">100</span>);<br><br><span class="hljs-comment">// Bundle加载的最大并发数</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _bundleLoadingMaxConcurrency;   <br><span class="hljs-comment">// WebGL平台强制同步加载资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> _webGLForceSyncLoadAsset;<br></code></pre></td></tr></table></figure><h3 id="Provider创建机制"><a href="#Provider创建机制" class="headerlink" title="Provider创建机制"></a>Provider创建机制</h3><p>ResourceManager为每种资源类型创建对应的Provider：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 157-187 (AssetProvider创建)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AssetHandle <span class="hljs-title">LoadAssetAsync</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 检查加载操作是否被锁定</span><br>    <span class="hljs-keyword">if</span> (LockLoadOperation) &#123; <span class="hljs-comment">/* 错误处理 */</span> &#125;<br>    <br>    <span class="hljs-comment">// 检查AssetInfo有效性</span><br>    <span class="hljs-keyword">if</span> (assetInfo.IsInvalid) &#123; <span class="hljs-comment">/* 错误处理 */</span> &#125;<br><br>    <span class="hljs-comment">// 生成Provider的唯一标识符</span><br>    <span class="hljs-built_in">string</span> providerGUID = <span class="hljs-keyword">nameof</span>(LoadAssetAsync) + assetInfo.GUID;<br>    <br>    <span class="hljs-comment">// 尝试获取已存在的Provider（复用机制）</span><br>    ProviderOperation provider = TryGetAssetProvider(providerGUID);<br>    <span class="hljs-keyword">if</span> (provider == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-comment">// 创建新的AssetProvider</span><br>        provider = <span class="hljs-keyword">new</span> AssetProvider(<span class="hljs-keyword">this</span>, providerGUID, assetInfo);<br>        provider.InitProviderDebugInfo();<br>        ProviderDic.Add(providerGUID, provider);<br>        OperationSystem.StartOperation(PackageName, provider);<br>    &#125;<br><br>    provider.Priority = priority;<br>    <span class="hljs-keyword">return</span> provider.CreateHandle&lt;AssetHandle&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bundle加载器管理"><a href="#Bundle加载器管理" class="headerlink" title="Bundle加载器管理"></a>Bundle加载器管理</h3><p>ResourceManager 通过Bundle加载器管理资源包的加载：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 298-313</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> LoadBundleFileOperation <span class="hljs-title">CreateMainBundleFileLoader</span>(<span class="hljs-params">AssetInfo assetInfo</span>)</span><br>&#123;<br>    BundleInfo bundleInfo = _bundleQuery.GetMainBundleInfo(assetInfo);<br>    <span class="hljs-keyword">return</span> CreateBundleFileLoaderInternal(bundleInfo);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">internal</span> List&lt;LoadBundleFileOperation&gt; <span class="hljs-title">CreateDependBundleFileLoaders</span>(<span class="hljs-params">AssetInfo assetInfo</span>)</span><br>&#123;<br>    List&lt;BundleInfo&gt; bundleInfos = _bundleQuery.GetDependBundleInfos(assetInfo);<br>    List&lt;LoadBundleFileOperation&gt; result = <span class="hljs-keyword">new</span> List&lt;LoadBundleFileOperation&gt;(bundleInfos.Count);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> bundleInfo <span class="hljs-keyword">in</span> bundleInfos)<br>    &#123;<br>        <span class="hljs-keyword">var</span> bundleLoader = CreateBundleFileLoaderInternal(bundleInfo);<br>        result.Add(bundleLoader);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Provider系统-资源提供者"><a href="#Provider系统-资源提供者" class="headerlink" title="Provider系统 - 资源提供者"></a>Provider系统 - 资源提供者</h2><p>Provider是资源加载的具体执行者，每种资源类型都有对应的Provider实现。</p><h3 id="AssetProvider-单资源提供者"><a href="#AssetProvider-单资源提供者" class="headerlink" title="AssetProvider - 单资源提供者"></a>AssetProvider - 单资源提供者</h3><p>AssetProvider 负责加载单个资源对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// AssetProvider.cs Line 11-42</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ProcessBundleResult</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (_loadAssetOp == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-comment">// 通过Bundle结果对象加载资源</span><br>        _loadAssetOp = BundleResultObject.LoadAssetAsync(MainAssetInfo);<br>        _loadAssetOp.StartOperation();<br>        AddChildOperation(_loadAssetOp);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_WEBGL</span><br>        <span class="hljs-comment">// WebGL平台强制同步加载</span><br>        <span class="hljs-keyword">if</span> (_resManager.WebGLForceSyncLoadAsset())<br>            _loadAssetOp.WaitForAsyncComplete();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (IsWaitForAsyncComplete)<br>        _loadAssetOp.WaitForAsyncComplete();<br><br>    _loadAssetOp.UpdateOperation();<br>    Progress = _loadAssetOp.Progress;<br>    <span class="hljs-keyword">if</span> (_loadAssetOp.IsDone == <span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (_loadAssetOp.Status != EOperationStatus.Succeed)<br>    &#123;<br>        InvokeCompletion(_loadAssetOp.Error, EOperationStatus.Failed);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        AssetObject = _loadAssetOp.Result;<br>        InvokeCompletion(<span class="hljs-built_in">string</span>.Empty, EOperationStatus.Succeed);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Handle系统-资源句柄"><a href="#Handle系统-资源句柄" class="headerlink" title="Handle系统 - 资源句柄"></a>Handle系统 - 资源句柄</h3><p>Handle是用户与加载资源交互的接口，提供了丰富的功能：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// AssetHandle.cs 关键功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AssetHandle</span> : <span class="hljs-title">HandleBase</span><br>&#123;<br>    <span class="hljs-comment">// 获取资源对象</span><br>    <span class="hljs-keyword">public</span> UnityEngine.Object AssetObject &#123; <span class="hljs-keyword">get</span>; &#125;<br>    <br>    <span class="hljs-comment">// 泛型获取资源对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TAsset <span class="hljs-title">GetAssetObject</span>&lt;<span class="hljs-title">TAsset</span>&gt;() <span class="hljs-keyword">where</span> TAsset : UnityEngine.Object</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    <span class="hljs-comment">// 同步实例化GameObject</span></span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> GameObject <span class="hljs-title">InstantiateSync</span>()</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    <span class="hljs-comment">// 异步实例化GameObject</span></span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> InstantiateOperation <span class="hljs-title">InstantiateAsync</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> actived = <span class="hljs-literal">true</span></span>)</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    <span class="hljs-comment">// 等待异步完成</span></span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WaitForAsyncComplete</span>()</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    <span class="hljs-comment">// 完成事件</span></span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> System.Action&lt;AssetHandle&gt; Completed</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="资源加载完整流程"><a href="#资源加载完整流程" class="headerlink" title="资源加载完整流程"></a>资源加载完整流程</h2><h3 id="从用户调用到资源加载完成的调用链"><a href="#从用户调用到资源加载完成的调用链" class="headerlink" title="从用户调用到资源加载完成的调用链"></a>从用户调用到资源加载完成的调用链</h3><pre><code class="mermaid">graph TD    A[用户代码] -->|package.LoadAssetAsync| B[ResourcePackage.LoadAssetAsync]    B -->|LoadAssetInternal| C[ResourceManager.LoadAssetAsync]    C -->|创建或复用| D[AssetProvider]    D -->|OperationSystem.StartOperation| E[Provider.InternalUpdate]    E -->|检查Bundle状态| F[ProcessBundleResult]    F -->|BundleResultObject.LoadAssetAsync| G[FSLoadAssetOperation]    G -->|Unity AssetBundle.LoadAssetAsync| H[UnityEngine.AssetBundle]    H -->|加载完成| I[AssetProvider.AssetObject]    I -->|CreateHandle| J[AssetHandle]    J -->|返回给用户| K[用户获得资源]    %% 详细说明    L[关键步骤说明]    L --> M[ResourcePackage统一入口]    L --> N[ResourceManager管理Provider]    L --> O[AssetProvider执行具体加载]    L --> P[Handle提供用户接口]    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style I fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style J fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style L fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style M fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style N fill:#74b9ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style O fill:#e17055,stroke:#ffffff,stroke-width:3px,color:#ffffff    style P fill:#81ecec,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h3 id="详细调用步骤解析"><a href="#详细调用步骤解析" class="headerlink" title="详细调用步骤解析"></a>详细调用步骤解析</h3><h4 id="1-用户入口-ResourcePackage"><a href="#1-用户入口-ResourcePackage" class="headerlink" title="1. 用户入口 - ResourcePackage"></a>1. 用户入口 - ResourcePackage</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 用户代码</span><br><span class="hljs-keyword">var</span> handle = package.LoadAssetAsync&lt;Texture2D&gt;(<span class="hljs-string">&quot;UITextures/Background&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-ResourcePackage统一处理"><a href="#2-ResourcePackage统一处理" class="headerlink" title="2. ResourcePackage统一处理"></a>2. ResourcePackage统一处理</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AssetHandle <span class="hljs-title">LoadAssetAsync</span>&lt;<span class="hljs-title">TObject</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> location, <span class="hljs-built_in">uint</span> priority = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    AssetInfo assetInfo = ConvertLocationToAssetInfo(location, <span class="hljs-keyword">typeof</span>(TObject));<br>    <span class="hljs-keyword">return</span> LoadAssetInternal(assetInfo, <span class="hljs-literal">false</span>, priority);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-ResourceManager创建Provider"><a href="#3-ResourceManager创建Provider" class="headerlink" title="3. ResourceManager创建Provider"></a>3. ResourceManager创建Provider</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AssetHandle <span class="hljs-title">LoadAssetAsync</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    <span class="hljs-built_in">string</span> providerGUID = <span class="hljs-keyword">nameof</span>(LoadAssetAsync) + assetInfo.GUID;<br>    ProviderOperation provider = TryGetAssetProvider(providerGUID);<br>    <span class="hljs-keyword">if</span> (provider == <span class="hljs-literal">null</span>)<br>    &#123;<br>        provider = <span class="hljs-keyword">new</span> AssetProvider(<span class="hljs-keyword">this</span>, providerGUID, assetInfo);<br>        ProviderDic.Add(providerGUID, provider);<br>        OperationSystem.StartOperation(PackageName, provider);<br>    &#125;<br>    <span class="hljs-keyword">return</span> provider.CreateHandle&lt;AssetHandle&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-AssetProvider执行加载"><a href="#4-AssetProvider执行加载" class="headerlink" title="4. AssetProvider执行加载"></a>4. AssetProvider执行加载</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// AssetProvider.cs</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ProcessBundleResult</span>()</span><br>&#123;<br>    _loadAssetOp = BundleResultObject.LoadAssetAsync(MainAssetInfo);<br>    <span class="hljs-comment">// ... 处理加载结果</span><br>    AssetObject = _loadAssetOp.Result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="场景加载特殊处理"><a href="#场景加载特殊处理" class="headerlink" title="场景加载特殊处理"></a>场景加载特殊处理</h2><p>场景加载与普通资源加载有所不同，每次加载都会创建新的Provider：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 118-151</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SceneHandle <span class="hljs-title">LoadSceneAsync</span>(<span class="hljs-params">AssetInfo assetInfo, LoadSceneParameters loadSceneParams, <span class="hljs-built_in">bool</span> suspendLoad, <span class="hljs-built_in">uint</span> priority</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 场景的ProviderGUID每次加载都会变化（支持同场景多次加载）</span><br>    <span class="hljs-built_in">string</span> providerGUID = <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;assetInfo.GUID&#125;</span>-<span class="hljs-subst">&#123;++_sceneCreateIndex&#125;</span>&quot;</span>;<br>    ProviderOperation provider;<br>    &#123;<br>        provider = <span class="hljs-keyword">new</span> SceneProvider(<span class="hljs-keyword">this</span>, providerGUID, assetInfo, loadSceneParams, suspendLoad);<br>        provider.InitProviderDebugInfo();<br>        ProviderDic.Add(providerGUID, provider);<br>        OperationSystem.StartOperation(PackageName, provider);<br>    &#125;<br><br>    provider.Priority = priority;<br>    <span class="hljs-keyword">var</span> handle = provider.CreateHandle&lt;SceneHandle&gt;();<br>    handle.PackageName = PackageName;<br>    SceneHandles.Add(handle);<br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="场景加载流程图"><a href="#场景加载流程图" class="headerlink" title="场景加载流程图"></a>场景加载流程图</h3><pre><code class="mermaid">graph TD    A[LoadSceneAsync] -->|生成唯一GUID| B[创建SceneProvider]    B -->|不复用Provider| C[每次都是新Provider]    C -->|LoadSceneParameters| D[Unity SceneManager]    D -->|支持暂停加载| E[suspendLoad=true]    D -->|正常加载| F[suspendLoad=false]    E --> G[加载到90%暂停]    F --> H[完整加载场景]    G --> I[用户调用ActivateScene]    H --> J[SceneHandle返回]    I --> J    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style I fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style J fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff</code></pre><h2 id="AssetInfo转换和查询机制"><a href="#AssetInfo转换和查询机制" class="headerlink" title="AssetInfo转换和查询机制"></a>AssetInfo转换和查询机制</h2><h3 id="Location到AssetInfo的转换"><a href="#Location到AssetInfo的转换" class="headerlink" title="Location到AssetInfo的转换"></a>Location到AssetInfo的转换</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 1153-1160</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> AssetInfo <span class="hljs-title">ConvertLocationToAssetInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, System.Type assetType</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> _playModeImpl.ActiveManifest.ConvertLocationToAssetInfo(location, assetType);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> AssetInfo <span class="hljs-title">ConvertAssetGUIDToAssetInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> assetGUID, System.Type assetType</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> _playModeImpl.ActiveManifest.ConvertAssetGUIDToAssetInfo(assetGUID, assetType);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AssetInfo包含的关键信息"><a href="#AssetInfo包含的关键信息" class="headerlink" title="AssetInfo包含的关键信息"></a>AssetInfo包含的关键信息</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AssetInfo</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> AssetPath;        <span class="hljs-comment">// 资源路径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> GUID;            <span class="hljs-comment">// 资源GUID</span><br>    <span class="hljs-keyword">public</span> System.Type AssetType;  <span class="hljs-comment">// 资源类型</span><br>    <span class="hljs-keyword">public</span> PackageAsset Asset;     <span class="hljs-comment">// 包资源信息</span><br>    <span class="hljs-keyword">public</span> ELoadMethod LoadMethod; <span class="hljs-comment">// 加载方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsInvalid;         <span class="hljs-comment">// 是否无效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Error;           <span class="hljs-comment">// 错误信息</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="资源回收和缓存机制"><a href="#资源回收和缓存机制" class="headerlink" title="资源回收和缓存机制"></a>资源回收和缓存机制</h2><h3 id="资源回收策略"><a href="#资源回收策略" class="headerlink" title="资源回收策略"></a>资源回收策略</h3><p>YooAsset提供了多种资源回收方式：</p><h4 id="1-强制回收所有资源"><a href="#1-强制回收所有资源" class="headerlink" title="1. 强制回收所有资源"></a>1. 强制回收所有资源</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 332-347</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> UnloadAllAssetsOperation <span class="hljs-title">UnloadAllAssetsAsync</span>(<span class="hljs-params">UnloadAllAssetsOptions options</span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    <span class="hljs-keyword">var</span> operation = <span class="hljs-keyword">new</span> UnloadAllAssetsOperation(_resourceManager, options);<br>    OperationSystem.StartOperation(PackageName, operation);<br>    <span class="hljs-keyword">return</span> operation;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-回收未使用的资源"><a href="#2-回收未使用的资源" class="headerlink" title="2. 回收未使用的资源"></a>2. 回收未使用的资源</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 355-361</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> UnloadUnusedAssetsOperation <span class="hljs-title">UnloadUnusedAssetsAsync</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> loopCount = <span class="hljs-number">10</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    <span class="hljs-keyword">var</span> operation = <span class="hljs-keyword">new</span> UnloadUnusedAssetsOperation(_resourceManager, loopCount);<br>    OperationSystem.StartOperation(PackageName, operation);<br>    <span class="hljs-keyword">return</span> operation;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-尝试卸载指定资源"><a href="#3-尝试卸载指定资源" class="headerlink" title="3. 尝试卸载指定资源"></a>3. 尝试卸载指定资源</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 367-382</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TryUnloadUnusedAsset</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">int</span> loopCount = <span class="hljs-number">10</span></span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    _resourceManager.TryUnloadUnusedAsset(assetInfo, loopCount);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="资源回收机制详解"><a href="#资源回收机制详解" class="headerlink" title="资源回收机制详解"></a>资源回收机制详解</h3><p>ResourceManager中的回收逻辑：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 66-111</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TryUnloadUnusedAsset</span>(<span class="hljs-params">AssetInfo assetInfo, <span class="hljs-built_in">int</span> loopCount</span>)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (loopCount &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        loopCount--;<br><br>        <span class="hljs-comment">// 卸载主资源包加载器</span><br>        <span class="hljs-built_in">string</span> mainBundleName = _bundleQuery.GetMainBundleName(assetInfo.Asset.BundleID);<br>        <span class="hljs-keyword">var</span> mainLoader = TryGetBundleFileLoader(mainBundleName);<br>        <span class="hljs-keyword">if</span> (mainLoader != <span class="hljs-literal">null</span>)<br>        &#123;<br>            mainLoader.TryDestroyProviders();<br>            <span class="hljs-keyword">if</span> (mainLoader.CanDestroyLoader())<br>            &#123;<br>                mainLoader.DestroyLoader();<br>                LoaderDic.Remove(mainBundleName);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 卸载依赖资源包加载器</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> dependID <span class="hljs-keyword">in</span> assetInfo.Asset.DependBundleIDs)<br>        &#123;<br>            <span class="hljs-built_in">string</span> dependBundleName = _bundleQuery.GetMainBundleName(dependID);<br>            <span class="hljs-keyword">var</span> dependLoader = TryGetBundleFileLoader(dependBundleName);<br>            <span class="hljs-keyword">if</span> (dependLoader != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (dependLoader.CanDestroyLoader())<br>                &#123;<br>                    dependLoader.DestroyLoader();<br>                    LoaderDic.Remove(dependBundleName);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="性能优化特性"><a href="#性能优化特性" class="headerlink" title="性能优化特性"></a>性能优化特性</h2><h3 id="1-Provider复用机制"><a href="#1-Provider复用机制" class="headerlink" title="1. Provider复用机制"></a>1. Provider复用机制</h3><p>ResourceManager 通过 ProviderGUID 实现Provider复用，避免重复加载：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> providerGUID = <span class="hljs-keyword">nameof</span>(LoadAssetAsync) + assetInfo.GUID;<br>ProviderOperation provider = TryGetAssetProvider(providerGUID);<br><span class="hljs-keyword">if</span> (provider == <span class="hljs-literal">null</span>)<br>&#123;<br>    <span class="hljs-comment">// 只有不存在时才创建新的Provider</span><br>    provider = <span class="hljs-keyword">new</span> AssetProvider(<span class="hljs-keyword">this</span>, providerGUID, assetInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Bundle加载并发控制"><a href="#2-Bundle加载并发控制" class="headerlink" title="2. Bundle加载并发控制"></a>2. Bundle加载并发控制</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _bundleLoadingMaxConcurrency;   <span class="hljs-comment">// 最大并发数</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> BundleLoadingCounter = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 当前加载计数</span><br><br><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">BundleLoadingIsBusy</span>()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> BundleLoadingCounter &gt;= _bundleLoadingMaxConcurrency;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-WebGL平台同步加载优化"><a href="#3-WebGL平台同步加载优化" class="headerlink" title="3. WebGL平台同步加载优化"></a>3. WebGL平台同步加载优化</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_WEBGL</span><br><span class="hljs-keyword">if</span> (_resManager.WebGLForceSyncLoadAsset())<br>    _loadAssetOp.WaitForAsyncComplete();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="4-场景自动清理机制"><a href="#4-场景自动清理机制" class="headerlink" title="4. 场景自动清理机制"></a>4. 场景自动清理机制</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 369-387</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnSceneUnloaded</span>(<span class="hljs-params">Scene scene</span>)</span><br>&#123;<br>    List&lt;SceneHandle&gt; removeList = <span class="hljs-keyword">new</span> List&lt;SceneHandle&gt;();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> sceneHandle <span class="hljs-keyword">in</span> SceneHandles)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (sceneHandle.IsValid &amp;&amp; sceneHandle.SceneObject == scene)<br>        &#123;<br>            sceneHandle.Release();<br>            removeList.Add(sceneHandle);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> sceneHandle <span class="hljs-keyword">in</span> removeList)<br>    &#123;<br>        SceneHandles.Remove(sceneHandle);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="错误处理和调试支持"><a href="#错误处理和调试支持" class="headerlink" title="错误处理和调试支持"></a>错误处理和调试支持</h2><h3 id="1-初始化状态检查"><a href="#1-初始化状态检查" class="headerlink" title="1. 初始化状态检查"></a>1. 初始化状态检查</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Conditional(<span class="hljs-string">&quot;DEBUG&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DebugCheckInitialize</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> checkActiveManifest = <span class="hljs-literal">true</span></span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (_initializeStatus == EOperationStatus.None)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;Package initialize not completed !&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_initializeStatus == EOperationStatus.Failed)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">$&quot;Package initialize failed ! <span class="hljs-subst">&#123;_initializeError&#125;</span>&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (checkActiveManifest &amp;&amp; _playModeImpl.ActiveManifest == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;Can not found active package manifest !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-资源类型有效性检查"><a href="#2-资源类型有效性检查" class="headerlink" title="2. 资源类型有效性检查"></a>2. 资源类型有效性检查</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Conditional(<span class="hljs-string">&quot;DEBUG&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DebugCheckAssetLoadType</span>(<span class="hljs-params">System.Type type</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(UnityEngine.Behaviour).IsAssignableFrom(type))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">$&quot;Load asset type is invalid : <span class="hljs-subst">&#123;type.FullName&#125;</span> !&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(UnityEngine.Object).IsAssignableFrom(type) == <span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">$&quot;Load asset type is invalid : <span class="hljs-subst">&#123;type.FullName&#125;</span> !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-调试信息支持"><a href="#3-调试信息支持" class="headerlink" title="3. 调试信息支持"></a>3. 调试信息支持</h3><p>ResourceManager 提供了丰富的调试接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourceManager.cs Line 390-433</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> List&lt;DebugProviderInfo&gt; <span class="hljs-title">GetDebugProviderInfos</span>()</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> List&lt;DebugBundleInfo&gt; <span class="hljs-title">GetDebugBundleInfos</span>()</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> DebugPackageData <span class="hljs-title">GetDebugPackageData</span>()</span><br></code></pre></td></tr></table></figure><h2 id="资源未下载时的按需下载机制"><a href="#资源未下载时的按需下载机制" class="headerlink" title="资源未下载时的按需下载机制"></a>资源未下载时的按需下载机制</h2><p>YooAsset的一个重要特性是<strong>按需下载（On-Demand Download）</strong>机制。当用户加载资源时发现资源尚未下载到本地，系统会根据配置自动进行下载，整个过程对用户透明。</p><h3 id="资源下载需求检查"><a href="#资源下载需求检查" class="headerlink" title="资源下载需求检查"></a>资源下载需求检查</h3><p>在资源加载前，可以通过以下接口检查资源是否需要下载：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// ResourcePackage.cs Line 390-410</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsNeedDownloadFromRemote</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location</span>)</span><br>&#123;<br>    DebugCheckInitialize();<br>    AssetInfo assetInfo = ConvertLocationToAssetInfo(location, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> IsNeedDownloadFromRemoteInternal(assetInfo);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsNeedDownloadFromRemoteInternal</span>(<span class="hljs-params">AssetInfo assetInfo</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (assetInfo.IsInvalid)<br>    &#123;<br>        YooLogger.Warning(assetInfo.Error);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查主Bundle是否需要下载</span><br>    BundleInfo bundleInfo = _bundleQuery.GetMainBundleInfo(assetInfo);<br>    <span class="hljs-keyword">if</span> (bundleInfo.IsNeedDownloadFromRemote())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 检查依赖Bundle是否需要下载</span><br>    List&lt;BundleInfo&gt; depends = _bundleQuery.GetDependBundleInfos(assetInfo);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> depend <span class="hljs-keyword">in</span> depends)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (depend.IsNeedDownloadFromRemote())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按需下载的核心逻辑"><a href="#按需下载的核心逻辑" class="headerlink" title="按需下载的核心逻辑"></a>按需下载的核心逻辑</h3><p>当资源加载时发现文件不存在，<code>DCFSLoadAssetBundleOperation</code>会自动处理下载：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// DCFSLoadAssetBundleOperation.cs关键代码段</span><br><span class="hljs-keyword">if</span> (_steps == ESteps.CheckExist)<br>&#123;<br>    <span class="hljs-keyword">if</span> (_fileSystem.Exists(_bundle))<br>    &#123;<br>        <span class="hljs-comment">// 文件已存在，直接加载</span><br>        DownloadProgress = <span class="hljs-number">1f</span>;<br>        DownloadedBytes = _bundle.FileSize;<br>        _steps = ESteps.LoadAssetBundle;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 文件不存在，检查是否允许按需下载</span><br>        <span class="hljs-keyword">if</span> (_fileSystem.DisableOnDemandDownload)<br>        &#123;<br>            <span class="hljs-comment">// 禁用按需下载，直接失败</span><br>            _steps = ESteps.Done;<br>            Status = EOperationStatus.Failed;<br>            Error = <span class="hljs-string">$&quot;The bundle not cached : <span class="hljs-subst">&#123;_bundle.BundleName&#125;</span>&quot;</span>;<br>            YooLogger.Warning(Error);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 允许按需下载，转入下载步骤</span><br>            _steps = ESteps.DownloadFile;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (_steps == ESteps.DownloadFile)<br>&#123;<br>    <span class="hljs-keyword">if</span> (_downloadFileOp == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-comment">// 创建下载操作</span><br>        DownloadFileOptions options = <span class="hljs-keyword">new</span> DownloadFileOptions(<span class="hljs-built_in">int</span>.MaxValue);<br>        _downloadFileOp = _fileSystem.DownloadFileAsync(_bundle, options);<br>        _downloadFileOp.StartOperation();<br>        AddChildOperation(_downloadFileOp);<br>    &#125;<br><br>    <span class="hljs-comment">// 更新下载进度</span><br>    _downloadFileOp.UpdateOperation();<br>    DownloadProgress = _downloadFileOp.DownloadProgress;<br>    DownloadedBytes = _downloadFileOp.DownloadedBytes;<br>    <br>    <span class="hljs-keyword">if</span> (_downloadFileOp.IsDone)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (_downloadFileOp.Status == EOperationStatus.Succeed)<br>        &#123;<br>            _steps = ESteps.LoadAssetBundle;  <span class="hljs-comment">// 下载成功，继续加载</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            _steps = ESteps.Done;<br>            Status = EOperationStatus.Failed;<br>            Error = _downloadFileOp.Error;   <span class="hljs-comment">// 下载失败</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按需下载流程图"><a href="#按需下载流程图" class="headerlink" title="按需下载流程图"></a>按需下载流程图</h3><pre><code class="mermaid">graph TD    A[开始加载资源] --> B[CheckExist检查文件]    B --> C{文件是否存在?}    C -->|存在| D[LoadAssetBundle直接加载]    C -->|不存在| E{是否禁用按需下载?}    E -->|是| F[加载失败返回错误]    E -->|否| G[DownloadFile开始下载]    G --> H[创建下载操作]    H --> I[更新下载进度]    I --> J{下载是否完成?}    J -->|否| I    J -->|是| K{下载是否成功?}    K -->|成功| D    K -->|失败| L[加载失败返回下载错误]    D --> M[CheckResult检查加载结果]    M --> N[加载完成]    F --> O[结束]    L --> O    N --> O    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style D fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style E fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style I fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style J fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style L fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style M fill:#74b9ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style N fill:#e17055,stroke:#ffffff,stroke-width:3px,color:#ffffff    style O fill:#81ecec,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h3 id="配置控制选项"><a href="#配置控制选项" class="headerlink" title="配置控制选项"></a>配置控制选项</h3><p>YooAsset提供了<code>DisableOnDemandDownload</code>配置项来控制按需下载行为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 在初始化参数中配置</span><br><span class="hljs-keyword">var</span> initParameters = <span class="hljs-keyword">new</span> HostPlayModeParameters()<br>&#123;<br>    <span class="hljs-comment">// 其他配置...</span><br>    DisableOnDemandDownload = <span class="hljs-literal">false</span>  <span class="hljs-comment">// 允许按需下载（默认）</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>配置选项对比：</strong></p><table><thead><tr><th>场景</th><th>DisableOnDemandDownload</th><th>行为</th><th>适用情况</th></tr></thead><tbody><tr><td>在线游戏</td><td>false</td><td>自动下载未缓存资源</td><td>网络环境良好，允许动态下载</td></tr><tr><td>离线模式</td><td>true</td><td>只加载已缓存资源</td><td>网络受限或要求完全离线运行</td></tr><tr><td>预下载验证</td><td>true</td><td>确保资源完整性</td><td>发布前验证所有资源已就绪</td></tr></tbody></table><h3 id="用户代码的最佳实践"><a href="#用户代码的最佳实践" class="headerlink" title="用户代码的最佳实践"></a>用户代码的最佳实践</h3><h4 id="1-预检查模式"><a href="#1-预检查模式" class="headerlink" title="1. 预检查模式"></a>1. 预检查模式</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 检查资源是否需要下载</span><br><span class="hljs-built_in">bool</span> needDownload = package.IsNeedDownloadFromRemote(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br><span class="hljs-keyword">if</span> (needDownload)<br>&#123;<br>    <span class="hljs-comment">// 提示用户资源需要下载</span><br>    ShowDownloadTip(<span class="hljs-string">&quot;资源需要下载，是否继续？&quot;</span>);<br>    <br>    <span class="hljs-comment">// 创建专门的下载器进行下载</span><br>    <span class="hljs-keyword">var</span> downloader = package.CreateBundleDownloader(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    downloader.BeginDownload();<br>    <br>    <span class="hljs-comment">// 等待下载完成后再加载</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> downloader;<br>    <span class="hljs-keyword">if</span> (downloader.Status == EOperationStatus.Succeed)<br>    &#123;<br>        <span class="hljs-keyword">var</span> handle = package.LoadAssetAsync&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> handle;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// 资源已存在，直接加载</span><br>    <span class="hljs-keyword">var</span> handle = package.LoadAssetAsync&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-透明加载模式"><a href="#2-透明加载模式" class="headerlink" title="2. 透明加载模式"></a>2. 透明加载模式</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 直接加载，系统会自动处理未下载的情况</span><br><span class="hljs-keyword">var</span> handle = package.LoadAssetAsync&lt;GameObject&gt;(<span class="hljs-string">&quot;UI/MainPanel&quot;</span>);<br><br><span class="hljs-comment">// 监听加载进度（包含下载进度）</span><br><span class="hljs-keyword">while</span> (!handle.IsDone)<br>&#123;<br>    <span class="hljs-comment">// 这里的进度包含了可能的下载进度</span><br>    Debug.Log(<span class="hljs-string">$&quot;Loading Progress: <span class="hljs-subst">&#123;handle.Progress&#125;</span>&quot;</span>);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (handle.Status == EOperationStatus.Succeed)<br>&#123;<br>    <span class="hljs-keyword">var</span> gameObject = handle.InstantiateSync();<br>    <span class="hljs-comment">// 使用资源...</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    Debug.LogError(<span class="hljs-string">$&quot;Failed to load asset: <span class="hljs-subst">&#123;handle.Error&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-批量预下载模式"><a href="#3-批量预下载模式" class="headerlink" title="3. 批量预下载模式"></a>3. 批量预下载模式</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 在适当的时机（如场景加载前）批量下载</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerator <span class="hljs-title">PredownloadSceneAssets</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneTag</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 创建基于Tag的下载器</span><br>    <span class="hljs-keyword">var</span> downloader = package.CreateResourceDownloader(sceneTag, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>    <br>    <span class="hljs-keyword">if</span> (downloader.TotalDownloadCount &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// 显示下载UI</span><br>        ShowDownloadProgress();<br>        <br>        downloader.BeginDownload();<br>        <span class="hljs-keyword">while</span> (!downloader.IsDone)<br>        &#123;<br>            <span class="hljs-comment">// 更新下载进度UI</span><br>            UpdateDownloadProgress(downloader.Progress, <br>                                 downloader.DownloadedBytes, <br>                                 downloader.TotalDownloadBytes);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 隐藏下载UI</span><br>        HideDownloadProgress();<br>        <br>        <span class="hljs-keyword">if</span> (downloader.Status != EOperationStatus.Succeed)<br>        &#123;<br>            Debug.LogError(<span class="hljs-string">&quot;Predownload failed!&quot;</span>);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 现在可以直接加载场景资源，无需担心下载问题</span><br>    LoadSceneAssets();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>YooAsset的资源加载系统采用了高度模块化的设计：</p><ol><li><strong>分层架构</strong>：ResourcePackage → ResourceManager → Provider → Handle 的清晰分层</li><li><strong>类型安全</strong>：通过泛型和AssetInfo确保类型安全</li><li><strong>按需下载</strong>：透明的按需下载机制，支持在线和离线模式</li><li><strong>性能优化</strong>：Provider复用、并发控制、平台特定优化</li><li><strong>错误处理</strong>：完善的验证和错误处理机制</li><li><strong>调试支持</strong>：丰富的调试接口和状态监控</li><li><strong>灵活配置</strong>：支持多种下载策略和配置模式</li></ol><p>按需下载机制的核心特性：</p><ul><li><strong>透明性</strong>：用户调用加载接口时，系统自动检查并处理未下载资源</li><li><strong>可配置性</strong>：通过<code>DisableOnDemandDownload</code>控制按需下载行为</li><li><strong>状态监控</strong>：提供完整的下载进度和状态反馈</li><li><strong>错误处理</strong>：详细的错误信息和失败处理机制</li><li><strong>依赖处理</strong>：自动处理资源依赖的下载需求</li></ul><p>这种设计既保证了高性能，又提供了良好的可维护性和扩展性，同时通过按需下载机制实现了在线和离线模式的完美结合，是一个优秀的资源管理系统实现。</p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YooAssets</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YooAsset源码阅读-Download</title>
    <link href="/2025/08/25/YooAsset_Code_Reading_Download/"/>
    <url>/2025/08/25/YooAsset_Code_Reading_Download/</url>
    
    <content type="html"><![CDATA[<p>继续 YooAsset 的下载系统代码研究，本文将详细介绍如何创建下载器相关代码</p><h2 id="CreateResourceDownloaderByAll"><a href="#CreateResourceDownloaderByAll" class="headerlink" title="CreateResourceDownloaderByAll"></a>CreateResourceDownloaderByAll</h2><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ul><li>PlayModeImpl.cs  </li><li>ResourceDownloaderOperation.cs</li><li>DownloaderOperation.cs</li><li>BundleInfo.cs</li></ul><p>CreateResourceDownloaderByAll 方法用于创建下载所有需要更新资源的下载器。</p><h4 id="关键源代码"><a href="#关键源代码" class="headerlink" title="关键源代码"></a>关键源代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// PlayModeImpl.cs Line 110-115</span><br>ResourceDownloaderOperation IPlayMode.CreateResourceDownloaderByAll(<span class="hljs-built_in">int</span> downloadingMaxNumber, <span class="hljs-built_in">int</span> failedTryAgain)<br>&#123;<br>    List&lt;BundleInfo&gt; downloadList = GetDownloadListByAll(ActiveManifest);<br>    <span class="hljs-keyword">var</span> operation = <span class="hljs-keyword">new</span> ResourceDownloaderOperation(PackageName, downloadList, downloadingMaxNumber, failedTryAgain);<br>    <span class="hljs-keyword">return</span> operation;<br>&#125;<br><br><span class="hljs-comment">// PlayModeImpl.cs Line 245-264</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BundleInfo&gt; <span class="hljs-title">GetDownloadListByAll</span>(<span class="hljs-params">PackageManifest manifest</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (manifest == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> List&lt;BundleInfo&gt;();<br><br>    List&lt;BundleInfo&gt; result = <span class="hljs-keyword">new</span> List&lt;BundleInfo&gt;(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> packageBundle <span class="hljs-keyword">in</span> manifest.BundleList)<br>    &#123;<br>        <span class="hljs-keyword">var</span> fileSystem = GetBelongFileSystem(packageBundle);<br>        <span class="hljs-keyword">if</span> (fileSystem == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (fileSystem.NeedDownload(packageBundle))<br>        &#123;<br>            <span class="hljs-keyword">var</span> bundleInfo = <span class="hljs-keyword">new</span> BundleInfo(fileSystem, packageBundle);<br>            result.Add(bundleInfo);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid">graph TD    A[CreateResourceDownloaderByAll] -->|调用| B[GetDownloadListByAll]    B -->|遍历| C[manifest.BundleList]    C -->|每个Bundle| D[GetBelongFileSystem]    D -->|检查| E[fileSystem.NeedDownload]    E -->|是| F[创建BundleInfo]    E -->|否| G[跳过该Bundle]    F --> H[添加到下载列表]    G --> I[继续下一个Bundle]    H --> I    I -->|所有Bundle处理完| J[返回下载列表]    J --> K[创建ResourceDownloaderOperation]    K --> L[返回下载器]    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style I fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style J fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style L fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h2 id="CreateResourceDownloaderByTags"><a href="#CreateResourceDownloaderByTags" class="headerlink" title="CreateResourceDownloaderByTags"></a>CreateResourceDownloaderByTags</h2><h3 id="关键类-1"><a href="#关键类-1" class="headerlink" title="关键类"></a>关键类</h3><ul><li>PlayModeImpl.cs</li><li>ResourceDownloaderOperation.cs</li><li>PackageBundle.cs</li></ul><p>CreateResourceDownloaderByTags 方法用于创建下载指定标签资源的下载器，支持DLC（可下载内容）场景。</p><h4 id="关键源代码-1"><a href="#关键源代码-1" class="headerlink" title="关键源代码"></a>关键源代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// PlayModeImpl.cs Line 116-121</span><br>ResourceDownloaderOperation IPlayMode.CreateResourceDownloaderByTags(<span class="hljs-built_in">string</span>[] tags, <span class="hljs-built_in">int</span> downloadingMaxNumber, <span class="hljs-built_in">int</span> failedTryAgain)<br>&#123;<br>    List&lt;BundleInfo&gt; downloadList = GetDownloadListByTags(ActiveManifest, tags);<br>    <span class="hljs-keyword">var</span> operation = <span class="hljs-keyword">new</span> ResourceDownloaderOperation(PackageName, downloadList, downloadingMaxNumber, failedTryAgain);<br>    <span class="hljs-keyword">return</span> operation;<br>&#125;<br><br><span class="hljs-comment">// PlayModeImpl.cs Line 265-297</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BundleInfo&gt; <span class="hljs-title">GetDownloadListByTags</span>(<span class="hljs-params">PackageManifest manifest, <span class="hljs-built_in">string</span>[] tags</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (manifest == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> List&lt;BundleInfo&gt;();<br><br>    List&lt;BundleInfo&gt; result = <span class="hljs-keyword">new</span> List&lt;BundleInfo&gt;(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> packageBundle <span class="hljs-keyword">in</span> manifest.BundleList)<br>    &#123;<br>        <span class="hljs-keyword">var</span> fileSystem = GetBelongFileSystem(packageBundle);<br>        <span class="hljs-keyword">if</span> (fileSystem == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (fileSystem.NeedDownload(packageBundle))<br>        &#123;<br>            <span class="hljs-comment">// 如果未带任何标记，则统一下载</span><br>            <span class="hljs-keyword">if</span> (packageBundle.HasAnyTags() == <span class="hljs-literal">false</span>)<br>            &#123;<br>                <span class="hljs-keyword">var</span> bundleInfo = <span class="hljs-keyword">new</span> BundleInfo(fileSystem, packageBundle);<br>                result.Add(bundleInfo);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">// 查询DLC资源</span><br>                <span class="hljs-keyword">if</span> (packageBundle.HasTag(tags))<br>                &#123;<br>                    <span class="hljs-keyword">var</span> bundleInfo = <span class="hljs-keyword">new</span> BundleInfo(fileSystem, packageBundle);<br>                    result.Add(bundleInfo);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid">graph TD    A[CreateResourceDownloaderByTags] -->|传入tags数组| B[GetDownloadListByTags]    B -->|遍历| C[manifest.BundleList]    C -->|每个Bundle| D[GetBelongFileSystem]    D -->|检查| E[fileSystem.NeedDownload]    E -->|否| F[跳过该Bundle]    E -->|是| G[检查Bundle标签]    G -->|HasAnyTags = false| H[无标签Bundle<br/>统一下载]    G -->|HasAnyTags = true| I[检查HasTag匹配]    I -->|匹配| J[DLC资源<br/>添加到下载列表]    I -->|不匹配| K[跳过该Bundle]    H --> L[创建BundleInfo]    J --> L    L --> M[添加到结果列表]    F --> N[继续下一个Bundle]    K --> N    M --> N    N -->|处理完成| O[返回下载列表]    O --> P[创建ResourceDownloaderOperation]    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style I fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style J fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style L fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style M fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style N fill:#74b9ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style O fill:#e17055,stroke:#ffffff,stroke-width:3px,color:#ffffff    style P fill:#81ecec,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h2 id="CreateResourceDownloaderByPaths"><a href="#CreateResourceDownloaderByPaths" class="headerlink" title="CreateResourceDownloaderByPaths"></a>CreateResourceDownloaderByPaths</h2><h3 id="关键类-2"><a href="#关键类-2" class="headerlink" title="关键类"></a>关键类</h3><ul><li>PlayModeImpl.cs</li><li>ResourceDownloaderOperation.cs  </li><li>AssetInfo.cs</li><li>PackageManifest.cs</li></ul><p>CreateResourceDownloaderByPaths 方法用于创建下载指定资源路径及其依赖的下载器，支持递归下载选项。</p><h4 id="关键源代码-2"><a href="#关键源代码-2" class="headerlink" title="关键源代码"></a>关键源代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// PlayModeImpl.cs Line 122-127</span><br>ResourceDownloaderOperation IPlayMode.CreateResourceDownloaderByPaths(AssetInfo[] assetInfos, <span class="hljs-built_in">bool</span> recursiveDownload, <span class="hljs-built_in">int</span> downloadingMaxNumber, <span class="hljs-built_in">int</span> failedTryAgain)<br>&#123;<br>    List&lt;BundleInfo&gt; downloadList = GetDownloadListByPaths(ActiveManifest, assetInfos, recursiveDownload);<br>    <span class="hljs-keyword">var</span> operation = <span class="hljs-keyword">new</span> ResourceDownloaderOperation(PackageName, downloadList, downloadingMaxNumber, failedTryAgain);<br>    <span class="hljs-keyword">return</span> operation;<br>&#125;<br><br><span class="hljs-comment">// PlayModeImpl.cs Line 298-359 (核心逻辑)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BundleInfo&gt; <span class="hljs-title">GetDownloadListByPaths</span>(<span class="hljs-params">PackageManifest manifest, AssetInfo[] assetInfos, <span class="hljs-built_in">bool</span> recursiveDownload</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (manifest == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> List&lt;BundleInfo&gt;();<br><br>    <span class="hljs-comment">// 获取资源对象的资源包和所有依赖资源包</span><br>    List&lt;PackageBundle&gt; checkList = <span class="hljs-keyword">new</span> List&lt;PackageBundle&gt;();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> assetInfo <span class="hljs-keyword">in</span> assetInfos)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (assetInfo.IsInvalid)<br>        &#123;<br>            YooLogger.Warning(assetInfo.Error);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取主资源包</span><br>        PackageBundle mainBundle = manifest.GetMainPackageBundle(assetInfo.Asset);<br>        <span class="hljs-keyword">if</span> (checkList.Contains(mainBundle) == <span class="hljs-literal">false</span>)<br>            checkList.Add(mainBundle);<br><br>        <span class="hljs-comment">// 获取依赖资源包</span><br>        List&lt;PackageBundle&gt; mainDependBundles = manifest.GetAssetAllDependencies(assetInfo.Asset);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> dependBundle <span class="hljs-keyword">in</span> mainDependBundles)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (checkList.Contains(dependBundle) == <span class="hljs-literal">false</span>)<br>                checkList.Add(dependBundle);<br>        &#125;<br><br>        <span class="hljs-comment">// 递归下载主资源包内所有资源对象依赖的资源包</span><br>        <span class="hljs-keyword">if</span> (recursiveDownload)<br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> otherMainAsset <span class="hljs-keyword">in</span> mainBundle.IncludeMainAssets)<br>            &#123;<br>                <span class="hljs-keyword">var</span> otherMainBundle = manifest.GetMainPackageBundle(otherMainAsset.BundleID);<br>                <span class="hljs-keyword">if</span> (checkList.Contains(otherMainBundle) == <span class="hljs-literal">false</span>)<br>                    checkList.Add(otherMainBundle);<br><br>                List&lt;PackageBundle&gt; otherDependBundles = manifest.GetAssetAllDependencies(otherMainAsset);<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> dependBundle <span class="hljs-keyword">in</span> otherDependBundles)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (checkList.Contains(dependBundle) == <span class="hljs-literal">false</span>)<br>                        checkList.Add(dependBundle);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 筛选需要下载的资源包</span><br>    List&lt;BundleInfo&gt; result = <span class="hljs-keyword">new</span> List&lt;BundleInfo&gt;(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> packageBundle <span class="hljs-keyword">in</span> checkList)<br>    &#123;<br>        <span class="hljs-keyword">var</span> fileSystem = GetBelongFileSystem(packageBundle);<br>        <span class="hljs-keyword">if</span> (fileSystem == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (fileSystem.NeedDownload(packageBundle))<br>        &#123;<br>            <span class="hljs-keyword">var</span> bundleInfo = <span class="hljs-keyword">new</span> BundleInfo(fileSystem, packageBundle);<br>            result.Add(bundleInfo);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid">graph TD    A[CreateResourceDownloaderByPaths] -->|AssetInfo数组| B[GetDownloadListByPaths]    B -->|遍历| C[AssetInfo数组]    C -->|每个AssetInfo| D{AssetInfo.IsInvalid?}    D -->|是| E[记录警告<br/>跳过该资源]    D -->|否| F[获取主资源包]    F --> G[添加到checkList]    G --> H[获取依赖资源包]    H --> I[添加依赖到checkList]    I --> J{recursiveDownload?}    J -->|否| K[处理下一个AssetInfo]    J -->|是| L[递归处理主资源包内<br/>所有资源的依赖]    L --> M[获取其他主资源包]    M --> N[获取其他依赖资源包]    N --> O[添加到checkList]    O --> K    E --> K    K -->|所有AssetInfo处理完| P[遍历checkList]    P -->|每个PackageBundle| Q[GetBelongFileSystem]    Q --> R{fileSystem.NeedDownload?}    R -->|是| S[创建BundleInfo<br/>添加到结果]    R -->|否| T[跳过该Bundle]    S --> U[继续下一个Bundle]    T --> U    U -->|处理完成| V[返回下载列表]    V --> W[创建ResourceDownloaderOperation]    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style I fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style J fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style L fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style M fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style N fill:#74b9ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style O fill:#e17055,stroke:#ffffff,stroke-width:3px,color:#ffffff    style P fill:#81ecec,stroke:#ffffff,stroke-width:3px,color:#000000    style Q fill:#55a3ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style R fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style S fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style T fill:#dda0dd,stroke:#ffffff,stroke-width:3px,color:#000000    style U fill:#98fb98,stroke:#ffffff,stroke-width:3px,color:#000000    style V fill:#ffd700,stroke:#ffffff,stroke-width:3px,color:#000000    style W fill:#ff69b4,stroke:#ffffff,stroke-width:3px,color:#ffffff</code></pre><h2 id="下载器核心机制"><a href="#下载器核心机制" class="headerlink" title="下载器核心机制"></a>下载器核心机制</h2><h3 id="ResourceDownloaderOperation-继承关系"><a href="#ResourceDownloaderOperation-继承关系" class="headerlink" title="ResourceDownloaderOperation 继承关系"></a>ResourceDownloaderOperation 继承关系</h3><pre><code class="mermaid">graph LR    AsyncOperationBase[AsyncOperationBase<br/>异步操作基类]     DownloaderOperation[DownloaderOperation<br/>下载器操作基类]    ResourceDownloaderOperation[ResourceDownloaderOperation<br/>资源下载器]    ResourceUnpackerOperation[ResourceUnpackerOperation<br/>资源解压器]    ResourceImporterOperation[ResourceImporterOperation<br/>资源导入器]    AsyncOperationBase -.->|继承| DownloaderOperation    DownloaderOperation -.->|继承| ResourceDownloaderOperation    DownloaderOperation -.->|继承| ResourceUnpackerOperation    DownloaderOperation -.->|继承| ResourceImporterOperation    %% 暗色主题样式    style AsyncOperationBase fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style DownloaderOperation fill:#ff6600,stroke:#ffffff,stroke-width:3px,color:#ffffff    style ResourceDownloaderOperation fill:#00ff88,stroke:#ffffff,stroke-width:3px,color:#000000    style ResourceUnpackerOperation fill:#ff4444,stroke:#ffffff,stroke-width:3px,color:#ffffff    style ResourceImporterOperation fill:#44ff44,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h3 id="下载器状态机"><a href="#下载器状态机" class="headerlink" title="下载器状态机"></a>下载器状态机</h3><p>DownloaderOperation 使用状态机管理下载流程：</p><pre><code class="mermaid">graph TD    A[DownloaderOperation.BeginDownload<br>外部使用] -->|InternalStart| B[Check]    B -->|验证下载列表| C{下载列表有效?}    C -->|无效| D[Done<br/>Status=Failed]    C -->|有效| E[Loading]    E -->|创建下载器| F[动态管理下载器池]    F -->|检查下载结果| G{有失败的下载?}    G -->|有| H[Done<br/>Status=Failed]    G -->|无| I{所有下载完成?}    I -->|否| J[继续下载]    I -->|是| K[Done<br/>Status=Succeed]    J --> F    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style D fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style I fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style J fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h3 id="下载器池管理机制"><a href="#下载器池管理机制" class="headerlink" title="下载器池管理机制"></a>下载器池管理机制</h3><p>DownloaderOperation 采用动态下载器池来优化下载性能，主要特性：</p><ol><li><strong>最大并发限制</strong>：通过 <code>MAX_LOADER_COUNT = 64</code> 和 <code>_downloadingMaxNumber</code> 控制同时下载的文件数量</li><li><strong>失败重试机制</strong>：支持 <code>_failedTryAgain</code> 参数控制失败重试次数  </li><li><strong>动态调度</strong>：当有下载器完成时，自动从待下载列表中选择新的文件开始下载</li><li><strong>暂停&#x2F;恢复</strong>：支持 <code>PauseDownload()</code> 和 <code>ResumeDownload()</code> 控制下载状态</li><li><strong>进度回调</strong>：提供详细的下载进度、错误、开始等事件回调</li></ol><p>需要注意 DownloaderOperation.InternalUpdate 方法中的关键逻辑：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 动态创建新的下载器到最大数量限制</span><br><span class="hljs-comment">// 注意：如果期间有下载失败的文件，暂停动态创建下载器</span><br><span class="hljs-keyword">if</span> (_bundleInfoList.Count &gt; <span class="hljs-number">0</span> &amp;&amp; _failedList.Count == <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (_isPause)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (_downloaders.Count &lt; _downloadingMaxNumber)<br>    &#123;<br>        <span class="hljs-built_in">int</span> index = _bundleInfoList.Count - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">var</span> bundleInfo = _bundleInfoList[index];<br>        <span class="hljs-keyword">var</span> downloader = bundleInfo.CreateDownloader(_failedTryAgain);<br>        downloader.StartOperation();<br>        <span class="hljs-keyword">this</span>.AddChildOperation(downloader);<br><br>        _downloaders.Add(downloader);<br>        _bundleInfoList.RemoveAt(index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="从用户调用到UnityWebRequest的完整调用链"><a href="#从用户调用到UnityWebRequest的完整调用链" class="headerlink" title="从用户调用到UnityWebRequest的完整调用链"></a>从用户调用到UnityWebRequest的完整调用链</h2><p>看完上面的分析，我觉得还需要把整个调用链梳理清楚，这样更容易理解整个下载流程。</p><h3 id="调用链概述"><a href="#调用链概述" class="headerlink" title="调用链概述"></a>调用链概述</h3><p>用户调用下载器到最终发起UnityWebRequest的完整调用链是这样的：</p><pre><code class="mermaid">graph TD    A[用户代码] -->|downloader.BeginDownload| B[DownloaderOperation]    B -->|OperationSystem.Update| C[InternalUpdate循环]    C -->|bundleInfo.CreateDownloader| D[BundleInfo]    D -->|_fileSystem.DownloadFileAsync| E[DefaultCacheFileSystem]    E -->|new DownloadPackageBundleOperation| F[DownloadPackageBundleOperation]    F -->|DownloadCenter.DownloadFileAsync| G[DownloadCenterOperation]    G -->|创建具体下载器| H[UnityDownloadFileOperation]    H -->|CreateWebRequest| I[UnityWebFileRequestOperation]    I -->|_webRequest.SendWebRequest| J[UnityWebRequest]        %% 详细步骤说明    K[关键步骤说明]    K --> L[用户调用BeginDownload启动下载]    K --> M[OperationSystem每帧Update驱动]    K --> N[BundleInfo适配不同FileSystem]    K --> O[FileSystem创建具体下载操作]    K --> P[DownloadCenter管理并发控制]    K --> Q[UnityWebRequest执行实际网络请求]    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style D fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style F fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style G fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff    style H fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style I fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000    style J fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style K fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style L fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style M fill:#74b9ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style N fill:#e17055,stroke:#ffffff,stroke-width:3px,color:#ffffff    style O fill:#81ecec,stroke:#ffffff,stroke-width:3px,color:#000000    style P fill:#55a3ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style Q fill:#dda0dd,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h3 id="关键调用点解析"><a href="#关键调用点解析" class="headerlink" title="关键调用点解析"></a>关键调用点解析</h3><h4 id="1-责任分离设计"><a href="#1-责任分离设计" class="headerlink" title="1. 责任分离设计"></a>1. 责任分离设计</h4><ul><li><strong>DownloaderOperation</strong>：管理下载器池和并发控制</li><li><strong>BundleInfo</strong>：适配器，统一不同FileSystem的接口</li><li><strong>DefaultCacheFileSystem</strong>：处理URL获取和参数配置</li><li><strong>DownloadPackageBundleOperation</strong>：状态机管理，重试逻辑</li><li><strong>DownloadCenter</strong>：并发限制和下载器复用</li><li><strong>UnityDownloadFileOperation</strong>：Unity网络请求的具体实现</li></ul><h4 id="2-异步调用链"><a href="#2-异步调用链" class="headerlink" title="2. 异步调用链"></a>2. 异步调用链</h4><p>整个调用链是异步的，通过 OperationSystem 的 Update 循环驱动：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 主要更新循环</span><br>YooAsset.Update() → OperationSystem.Update() → AsyncOperationBase.Update() → InternalUpdate()<br></code></pre></td></tr></table></figure><h4 id="3-错误处理和重试"><a href="#3-错误处理和重试" class="headerlink" title="3. 错误处理和重试"></a>3. 错误处理和重试</h4><p>在调用链的每一层都有相应的错误处理：</p><ul><li><strong>DownloaderOperation</strong>：失败隔离策略</li><li><strong>DownloadPackageBundleOperation</strong>：重试逻辑和超时处理</li><li><strong>UnityWebRequest</strong>：网络层错误处理</li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YooAssets</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试代码高亮功能</title>
    <link href="/2025/08/01/Test_Code_Highlight_Functionality/"/>
    <url>/2025/08/01/Test_Code_Highlight_Functionality/</url>
    
    <content type="html"><![CDATA[<h2 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h2><p>测试不同编程语言的代码高亮效果。</p><h3 id="C-代码测试"><a href="#C-代码测试" class="headerlink" title="C# 代码测试"></a>C# 代码测试</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TestNamespace</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> _name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _value;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestClass</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span><br>        &#123;<br>            _name = name;<br>            _value = <span class="hljs-keyword">value</span>;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintInfo</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">$&quot;Name: <span class="hljs-subst">&#123;_name&#125;</span>, Value: <span class="hljs-subst">&#123;_value&#125;</span>&quot;</span>);<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">GetDataAsync</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">await</span> Task.Delay(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Data loaded&quot;</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// LINQ 示例</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetEvenNumbers</span>(<span class="hljs-params">List&lt;<span class="hljs-built_in">int</span>&gt; numbers</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> numbers.Where(n =&gt; n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>).ToList();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-Unity-代码测试"><a href="#C-Unity-代码测试" class="headerlink" title="C# Unity 代码测试"></a>C# Unity 代码测试</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> System.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> speed = <span class="hljs-number">5.0f</span>;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> Rigidbody rb;<br>    <br>    <span class="hljs-keyword">private</span> Vector3 movement;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        rb = GetComponent&lt;Rigidbody&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">float</span> horizontal = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-built_in">float</span> vertical = Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>);<br>        <br>        movement = <span class="hljs-keyword">new</span> Vector3(horizontal, <span class="hljs-number">0</span>, vertical);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span><br>    &#123;<br>        rb.MovePosition(transform.position + movement * speed * Time.fixedDeltaTime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JavaScript-代码测试"><a href="#JavaScript-代码测试" class="headerlink" title="JavaScript 代码测试"></a>JavaScript 代码测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameManager</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">players</span> = [];<br>    &#125;<br>    <br>    <span class="hljs-title function_">addPlayer</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-keyword">const</span> player = &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(),<br>            <span class="hljs-attr">name</span>: name,<br>            <span class="hljs-attr">score</span>: <span class="hljs-number">0</span><br>        &#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">players</span>.<span class="hljs-title function_">push</span>(player);<br>        <span class="hljs-keyword">return</span> player;<br>    &#125;<br>    <br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">loadData</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/gamedata&#x27;</span>);<br>            <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">processData</span>(data);<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to load data:&#x27;</span>, error);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-title function_">updateScore</span>(<span class="hljs-params">playerId, points</span>) &#123;<br>        <span class="hljs-keyword">const</span> player = <span class="hljs-variable language_">this</span>.<span class="hljs-property">players</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> p.<span class="hljs-property">id</span> === playerId);<br>        <span class="hljs-keyword">if</span> (player) &#123;<br>            player.<span class="hljs-property">score</span> += points;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> += points;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Python-代码测试"><a href="#Python-代码测试" class="headerlink" title="Python 代码测试"></a>Python 代码测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">Optional</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataProcessor</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: <span class="hljs-type">Dict</span></span>):<br>        <span class="hljs-variable language_">self</span>.config = config<br>        <span class="hljs-variable language_">self</span>.data = []<br>    <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_data</span>(<span class="hljs-params">self, items: <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>]:<br>        <span class="hljs-string">&quot;&quot;&quot;处理数据的异步方法&quot;&quot;&quot;</span><br>        processed = []<br>        <br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>            <span class="hljs-comment"># 数据清洗</span><br>            cleaned_item = <span class="hljs-variable language_">self</span>._clean_item(item)<br>            <br>            <span class="hljs-comment"># 数据验证</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._validate_item(cleaned_item):<br>                processed.append(cleaned_item)<br>        <br>        <span class="hljs-keyword">return</span> processed<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_clean_item</span>(<span class="hljs-params">self, item: <span class="hljs-type">Dict</span></span>) -&gt; <span class="hljs-type">Dict</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;清理单个数据项&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> &#123;k: v.strip() <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">else</span> v <br>                <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> item.items()&#125;<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_validate_item</span>(<span class="hljs-params">self, item: <span class="hljs-type">Dict</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;验证数据项&quot;&quot;&quot;</span><br>        required_fields = <span class="hljs-variable language_">self</span>.config.get(<span class="hljs-string">&#x27;required_fields&#x27;</span>, [])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(field <span class="hljs-keyword">in</span> item <span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> required_fields)<br><br><span class="hljs-comment"># 使用示例</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    config = &#123;<span class="hljs-string">&quot;required_fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>]&#125;<br>    processor = DataProcessor(config)<br>    <br>    data = [<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;alice@example.com&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;bob@example.com&quot;</span>&#125;<br>    ]<br>    <br>    result = <span class="hljs-keyword">await</span> processor.process_data(data)<br>    <span class="hljs-built_in">print</span>(json.dumps(result, indent=<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><h3 id="Java-代码测试"><a href="#Java-代码测试" class="headerlink" title="Java 代码测试"></a>Java 代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameEngine</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Player&gt; players;<br>    <span class="hljs-keyword">private</span> GameState currentState;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameEngine</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.players = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.currentState = GameState.WAITING;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPlayer</span><span class="hljs-params">(String id, String name)</span> &#123;<br>        <span class="hljs-type">Player</span> <span class="hljs-variable">player</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(id, name);<br>        players.put(id, player);<br>        <br>        <span class="hljs-keyword">if</span> (players.size() &gt;= <span class="hljs-number">2</span>) &#123;<br>            currentState = GameState.READY;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;Player&gt; <span class="hljs-title function_">getTopPlayers</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-keyword">return</span> players.values().stream()<br>                .sorted(Comparator.comparingInt(Player::getScore).reversed())<br>                .limit(count)<br>                .collect(Collectors.toList());<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Optional&lt;Player&gt; <span class="hljs-title function_">findPlayer</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(players.get(id));<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameState</span> &#123;<br>        WAITING, READY, PLAYING, FINISHED<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String id;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>        <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Player</span><span class="hljs-params">(String id, String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.id = id;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.score = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> score; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addScore</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span> &#123; <span class="hljs-built_in">this</span>.score += points; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>如果你看到：</p><ul><li><strong>正确高亮</strong>：语法关键字有颜色，字符串、注释等有不同颜色</li><li><strong>无高亮</strong>：所有代码都是同一种颜色</li></ul><p>请告诉我哪些语言有高亮问题，我会进行修复。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>代码高亮</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YooAssets源码解读-初始化</title>
    <link href="/2025/08/01/YooAssets_Source_Code_Reading_Initialization/"/>
    <url>/2025/08/01/YooAssets_Source_Code_Reading_Initialization/</url>
    
    <content type="html"><![CDATA[<h1 id="YooAssets源码解读-初始化"><a href="#YooAssets源码解读-初始化" class="headerlink" title="YooAssets源码解读 - 初始化"></a>YooAssets源码解读 - 初始化</h1><p>最近打完包，刚好有空，看一下项目中使用的 YooAsset 源码，这部分是关于初始化的代码。</p><h2 id="YooAsset-Initialize"><a href="#YooAsset-Initialize" class="headerlink" title="YooAsset.Initialize()"></a>YooAsset.Initialize()</h2><p>初始化，主要记录 YooAsset 在初始化时做了什么</p><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ul><li>YooAsset.cs</li><li>YooAssetDriver.cs</li><li>OperationSystem.cs</li></ul><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid">graph TD    A[YooAsset] --> B[Initialize]    B --> YooAssetDriver[YooAssetDriver]    YooAssetDriver --> Update[Update]    Update --> A    A --> OperationSystemUpdate[OperationSystemUpdate]    B --> OperationSystem[OperationSystem]    OperationSystem --> Initialize[Initialize]    OperationSystem --> OperationSystemUpdate    %% 暗色主题样式    style A fill:#ff6b6b,stroke:#ffffff,stroke-width:3px,color:#ffffff    style B fill:#4ecdc4,stroke:#ffffff,stroke-width:3px,color:#000000    style YooAssetDriver fill:#45b7d1,stroke:#ffffff,stroke-width:3px,color:#ffffff    style Update fill:#f9ca24,stroke:#ffffff,stroke-width:3px,color:#000000    style OperationSystem fill:#6c5ce7,stroke:#ffffff,stroke-width:3px,color:#ffffff    style OperationSystemUpdate fill:#a29bfe,stroke:#ffffff,stroke-width:3px,color:#ffffff    style Initialize fill:#fd79a8,stroke:#ffffff,stroke-width:3px,color:#ffffff</code></pre><h2 id="初始化包"><a href="#初始化包" class="headerlink" title="初始化包"></a>初始化包</h2><p>YooAsset 在初始化时会创建一个资源包（ResourcePackage），并设置其运行模式。</p><h3 id="关键类-1"><a href="#关键类-1" class="headerlink" title="关键类"></a>关键类</h3><ul><li>YooAsset.cs</li><li>ResourcePackage.cs</li></ul><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid">graph TD    A[YooAsset.CreatePackage] -->|new| ResourcePackage[ResourcePackage]    %% 暗色主题样式    style A fill:#00d2d3,stroke:#ffffff,stroke-width:3px,color:#ffffff    style ResourcePackage fill:#ff9ff3,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h2 id="初始化资源运行模式"><a href="#初始化资源运行模式" class="headerlink" title="初始化资源运行模式"></a>初始化资源运行模式</h2><p>初始化资源的运行模式(OfflinePlayModeParameters, EditorSimulateModeParameters, HostPlayModeParameters, WebPlayModeParameters)。</p><h3 id="关键类-2"><a href="#关键类-2" class="headerlink" title="关键类"></a>关键类</h3><ul><li>ResourcePackage.cs</li><li>PlayModeImpl.cs</li><li>InitializeParameters.cs</li></ul><h3 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid">graph TD    F[FileSystemParameters]    A[ResourcePackage.InitializeAsync] --> AA[PlayModeImpl]    AA --> InitializationOperation[InitializationOperation<br/>初始化操作]    InitializationOperation -.-> B[EditorSimulateModeParameters.InitializeAsync]    InitializationOperation -.-> C[OfflinePlayModeParameters.InitializeAsync]    InitializationOperation -.-> D[HostPlayModeParameters.InitializeAsync]    InitializationOperation -.-> E[WebPlayModeParameters.InitializeAsync]    %% 暗色主题样式    style InitializationOperation fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style A fill:#ff3838,stroke:#ffffff,stroke-width:3px,color:#ffffff    style AA fill:#2ed573,stroke:#ffffff,stroke-width:3px,color:#000000    style B fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style C fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style D fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000    style E fill:#ffa502,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h3 id="继承关系图"><a href="#继承关系图" class="headerlink" title="继承关系图"></a>继承关系图</h3><pre><code class="mermaid">graph LR    %% 继承关系清晰展示    InitializationOperation[InitializationOperation<br/>初始化操作]    EditorSimulateModeParameters[EditorSimulateModeParameters<br/>编辑器模拟模式参数]    OfflinePlayModeParameters[OfflinePlayModeParameters<br/>离线运行模式参数]    HostPlayModeParameters[HostPlayModeParameters<br/>主机运行模式参数]    WebPlayModeParameters[WebPlayModeParameters<br/>Web运行模式参数]    InitializationOperation -.->|派生| EditorSimulateModeParameters    InitializationOperation -.->|派生| OfflinePlayModeParameters    InitializationOperation -.->|派生| HostPlayModeParameters    InitializationOperation -.->|派生| WebPlayModeParameters    %% 样式 - 暗色主题高对比度    style InitializationOperation fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style EditorSimulateModeParameters fill:#ff6600,stroke:#ffffff,stroke-width:3px,color:#ffffff    style OfflinePlayModeParameters fill:#00ff88,stroke:#ffffff,stroke-width:3px,color:#000000    style HostPlayModeParameters fill:#ff4444,stroke:#ffffff,stroke-width:3px,color:#ffffff    style WebPlayModeParameters fill:#44ff44,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h2 id="获取资源版本"><a href="#获取资源版本" class="headerlink" title="获取资源版本"></a>获取资源版本</h2><h3 id="关键类-3"><a href="#关键类-3" class="headerlink" title="关键类"></a>关键类</h3><ul><li>ResourcePackage.cs</li><li>OperationSystem.cs</li><li>PlayModeImpl.cs</li><li>RequestPackageVersionImplOperation.cs</li><li>AsyncOperationBase.cs</li><li>RequestPackageVersionOperation.cs</li></ul><h3 id="流程图-3"><a href="#流程图-3" class="headerlink" title="流程图"></a>流程图</h3><p>需要注意黄色 YooAsset.Update 是一个独立的分支,看到这里理解了 AsyncOperationBase.Update 和 各个异步操作的 InternalUpdate 方法的调用关系。初始化相关代码就非理解了。这里给出两种调方式。</p><ol><li>OperationSystem.Update 调用 AsyncOperationBase.Update</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// OperationSystem.cs</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartOperation</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> packageName, AsyncOperationBase operation</span>)</span><br>&#123;<br>    _newList.Add(operation); <span class="hljs-comment">// 注意这个_newList</span><br>    operation.SetPackageName(packageName);<br>    operation.StartOperation();<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 更新异步操作系统</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 移除已经完成的异步操作</span><br>    <span class="hljs-comment">// 注意：移除上一帧完成的异步操作，方便调试器接收到完整的信息！</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = _operations.Count - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        AsyncOperationBase operation = _operations[i];<br>        <span class="hljs-keyword">if</span> (operation.IsFinish)<br>            _operations.RemoveAt(i);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加新增的异步操作</span><br>    <span class="hljs-keyword">if</span> (_newList.Count &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">bool</span> sorting = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">foreach</span> (AsyncOperationBase operation <span class="hljs-keyword">in</span> _newList)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (operation.Priority &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                sorting = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        _operations.AddRange(_newList);<br>        _newList.Clear();<br><br>        <span class="hljs-comment">// 重新排序优先级</span><br>        <span class="hljs-keyword">if</span> (sorting)<br>            _operations.Sort();<br>    &#125;<br><br>    <span class="hljs-comment">// 更新进行中的异步操作</span><br>    _frameTime = _watch.ElapsedMilliseconds;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _operations.Count; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (IsBusy)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">var</span> operation = _operations[i];<br>        <span class="hljs-keyword">if</span> (operation.IsFinish)<br>            <span class="hljs-keyword">continue</span>;<br><br>        operation.UpdateOperation();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>子进程调用</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CSharp"><span class="hljs-comment">// RequestPackageVersionOperation.cs 这个Update由 OperationSystem.Update 调用</span><br>  <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InternalUpdate</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_steps == ESteps.None || _steps == ESteps.Done)<br>                <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">if</span> (_steps == ESteps.RequestPackageVersion)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (_requestPackageVersionOp == <span class="hljs-literal">null</span>)<br>                &#123;<br>                    <span class="hljs-comment">// 获取主文件系统</span><br>                    <span class="hljs-keyword">var</span> mainFileSystem = _impl.GetMainFileSystem();<br>                    <span class="hljs-comment">// 请求包裹版本</span><br>                    _requestPackageVersionOp = mainFileSystem.RequestPackageVersionAsync(_appendTimeTicks, _timeout);<br>                    <span class="hljs-comment">// 开始操作</span><br>                    _requestPackageVersionOp.StartOperation();<br>                    AddChildOperation(_requestPackageVersionOp);<br>                &#125;<br><br>                <span class="hljs-comment">// 注意这个 UpdateOperation 调用 就是子进程的 Update</span><br>                _requestPackageVersionOp.UpdateOperation();<br>                <span class="hljs-keyword">if</span> (_requestPackageVersionOp.IsDone == <span class="hljs-literal">false</span>)<br>                    <span class="hljs-keyword">return</span>;<br><br>                <span class="hljs-keyword">if</span> (_requestPackageVersionOp.Status == EOperationStatus.Succeed)<br>                &#123;<br>                    _steps = ESteps.Done;<br>                    PackageVersion = _requestPackageVersionOp.PackageVersion;<br>                    Status = EOperationStatus.Succeed;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    _steps = ESteps.Done;<br>                    Status = EOperationStatus.Failed;<br>                    Error = _requestPackageVersionOp.Error;<br>                &#125;<br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure><pre><code class="mermaid">graph TB    %% ========== 请求发起层 ==========    A[ResourcePackage.RequestPackageVersionAsync]    %% ========== 系统管理层 ==========    A --> B[PlayModeImpl.RequestPackageVersionAsync]    A --> C[OperationSystem.StartOperation]    %% ========== 操作创建层 ==========    B --> D[RequestPackageVersionImplOperation]    C --> EA[AsyncOperationBase.StartOperation]    %% ========== 操作执行层 ==========    EA --> FA[RequestPackageVersionOperation.InternalStart]    %% ========== 异步更新流程（独立分支）==========    G[YooAsset.Update] --> H[OperationSystem.Update]    H --> EB[AsyncOperationBase.Update]    EB --> FB[RequestPackageVersionOperation.InternalUpdate]    FB --> DA[RequestPackageVersionImplOperation.InternalUpdate]    %% 样式定义 - 适配暗色主题的高对比度配色    classDef requestLayer fill:#ff4444,stroke:#ffffff,stroke-width:3px,color:#ffffff    classDef systemLayer fill:#44ff44,stroke:#ffffff,stroke-width:3px,color:#000000    classDef operationLayer fill:#4444ff,stroke:#ffffff,stroke-width:3px,color:#ffffff    classDef updateLayer fill:#ffaa00,stroke:#ffffff,stroke-width:3px,color:#000000    class A requestLayer    class B,C systemLayer    class D,EA,FA operationLayer    class G,H,EB,FB,DA updateLayer</code></pre><h3 id="继承关系图-1"><a href="#继承关系图-1" class="headerlink" title="继承关系图"></a>继承关系图</h3><pre><code class="mermaid">graph LR    %% 继承关系清晰展示    AsyncOperationBase[AsyncOperationBase<br/>异步操作基类]    RequestPackageVersionOperation[RequestPackageVersionOperation<br/>请求包版本操作]    RequestPackageVersionImplOperation[RequestPackageVersionImplOperation<br/>请求包版本实现操作]    AsyncOperationBase -.->|派生| RequestPackageVersionOperation    RequestPackageVersionOperation -.->|派生| RequestPackageVersionImplOperation    %% 样式 - 暗色主题高对比度    style AsyncOperationBase fill:#00aaff,stroke:#ffffff,stroke-width:3px,color:#ffffff    style RequestPackageVersionOperation fill:#ff6600,stroke:#ffffff,stroke-width:3px,color:#ffffff    style RequestPackageVersionImplOperation fill:#00ff88,stroke:#ffffff,stroke-width:3px,color:#000000</code></pre><h2 id="更新资源清单"><a href="#更新资源清单" class="headerlink" title="更新资源清单"></a>更新资源清单</h2><p>基本上和获取资源版本差不多的逻辑。（懒了，不写了）。</p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YooAssets</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试Mermaid图表功能</title>
    <link href="/2025/08/01/Test_Mermaid_Chart_Functionality/"/>
    <url>/2025/08/01/Test_Mermaid_Chart_Functionality/</url>
    
    <content type="html"><![CDATA[<h2 id="Mermaid-图表测试"><a href="#Mermaid-图表测试" class="headerlink" title="Mermaid 图表测试"></a>Mermaid 图表测试</h2><p>本文用于测试博客的 Mermaid 图表功能，包括不同类型的图表和主题适配。</p><h3 id="1-流程图-Flowchart"><a href="#1-流程图-Flowchart" class="headerlink" title="1. 流程图 (Flowchart)"></a>1. 流程图 (Flowchart)</h3><pre><code class="mermaid">graph TD    A[开始] --> B{条件判断}    B -->|是| C[执行操作A]    B -->|否| D[执行操作B]    C --> E[结束]    D --> E</code></pre><h3 id="2-序列图-Sequence-Diagram"><a href="#2-序列图-Sequence-Diagram" class="headerlink" title="2. 序列图 (Sequence Diagram)"></a>2. 序列图 (Sequence Diagram)</h3><pre><code class="mermaid">sequenceDiagram    participant A as 用户    participant B as 前端    participant C as 后端    participant D as 数据库        A->>B: 提交请求    B->>C: 发送API请求    C->>D: 查询数据    D-->>C: 返回结果    C-->>B: 响应数据    B-->>A: 显示结果</code></pre><h3 id="3-甘特图-Gantt-Chart"><a href="#3-甘特图-Gantt-Chart" class="headerlink" title="3. 甘特图 (Gantt Chart)"></a>3. 甘特图 (Gantt Chart)</h3><pre><code class="mermaid">gantt    title 项目开发计划    dateFormat  YYYY-MM-DD    section 设计阶段    需求分析       :done,    des1, 2025-01-01,2025-01-05    UI设计        :done,    des2, 2025-01-06,2025-01-10    section 开发阶段    前端开发       :active,  dev1, 2025-01-11,2025-01-25    后端开发       :         dev2, 2025-01-15,2025-01-30    section 测试阶段    单元测试       :         test1, 2025-01-26,2025-02-05    集成测试       :         test2, 2025-02-01,2025-02-10</code></pre><h3 id="4-类图-Class-Diagram"><a href="#4-类图-Class-Diagram" class="headerlink" title="4. 类图 (Class Diagram)"></a>4. 类图 (Class Diagram)</h3><pre><code class="mermaid">classDiagram    class Animal {        +String name        +int age        +makeSound()        +move()    }        class Dog {        +String breed        +bark()        +wagTail()    }        class Cat {        +String color        +meow()        +purr()    }        Animal <|-- Dog    Animal <|-- Cat</code></pre><h3 id="5-状态图-State-Diagram"><a href="#5-状态图-State-Diagram" class="headerlink" title="5. 状态图 (State Diagram)"></a>5. 状态图 (State Diagram)</h3><pre><code class="mermaid">stateDiagram-v2    [*] --> 空闲    空闲 --> 工作中 : 开始工作    工作中 --> 暂停 : 暂停    暂停 --> 工作中 : 继续    工作中 --> 完成 : 工作完成    完成 --> [*]</code></pre><h3 id="6-饼图-Pie-Chart"><a href="#6-饼图-Pie-Chart" class="headerlink" title="6. 饼图 (Pie Chart)"></a>6. 饼图 (Pie Chart)</h3><pre><code class="mermaid">pie title 技术栈使用占比    "JavaScript" : 35    "Python" : 25    "Java" : 20    "C#" : 15    "其他" : 5</code></pre><h3 id="使用标签语法测试"><a href="#使用标签语法测试" class="headerlink" title="使用标签语法测试"></a>使用标签语法测试</h3><pre><code class="mermaid" >graph LR    A[标签语法] --> B[正常渲染]    B --> C[测试成功]</code></pre><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><ul><li>✅ 支持 Markdown 代码块语法 (```mermaid)</li><li>✅ 支持 Hexo 标签语法 (</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>Mermaid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClaudeCode使用RIPER-5提升编码效率</title>
    <link href="/2025/07/29/Using_RIPER-5_to_Enhance_Coding_Efficiency/"/>
    <url>/2025/07/29/Using_RIPER-5_to_Enhance_Coding_Efficiency/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFriper-5">什么是RIPER-5</a></li><li><a href="#%E9%92%88%E5%AF%B9%E9%97%AE%E9%A2%98">针对问题</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E6%A0%B8%E5%BF%83">简述核心</a><ul><li><a href="#%E5%88%87%E6%8D%A2%E7%AA%97%E5%8F%A3%E8%AE%B0%E5%BF%86">切换窗口记忆</a><ul><li><a href="#%E6%89%A9%E5%B1%95">扩展</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E8%AE%A9-ai-%E6%93%8D%E4%BD%9C%E5%8F%98%E5%BE%97%E5%8F%AF%E6%8E%A7">如何让 AI 操作变得可控</a></li></ul></li><li><a href="#%E4%BC%98%E7%BC%BA%E7%82%B9">优缺点</a><ul><li><a href="#%E4%BC%98%E7%82%B9">优点</a></li><li><a href="#%E7%BC%BA%E7%82%B9">缺点</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li><li><a href="#%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84-riper-5">我使用的 RIPER-5</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><h2 id="什么是RIPER-5"><a href="#什么是RIPER-5" class="headerlink" title="什么是RIPER-5"></a>什么是<a href="https://forum.cursor.com/t/i-created-an-amazing-mode-called-riper-5-mode-fixes-claude-3-7-drastically/65516">RIPER-5</a></h2><p><a href="https://forum.cursor.com/t/i-created-an-amazing-mode-called-riper-5-mode-fixes-claude-3-7-drastically/65516">RIPER-5</a> 代表五种模式（研究、创新、计划、执行、回顾），RIPER-5 是 Cursor 社区中分享的一个高效 AI 工作流。</p><h2 id="针对问题"><a href="#针对问题" class="headerlink" title="针对问题"></a>针对问题</h2><p>我对我在使用 AI 时问题有几点：</p><ol><li>切换对话窗口后如何获取记忆</li><li>如何高效的获取足够的上下文</li><li>如何让 AI 操作变得可控</li><li>如何让 AI 严格执行规则文件<br>RIPER-5 主要解决的问题是第一点（切换窗口的记忆）和第三点（如何让 AI 操作变得可控）</li></ol><h2 id="简述核心"><a href="#简述核心" class="headerlink" title="简述核心"></a>简述核心</h2><h3 id="切换窗口记忆"><a href="#切换窗口记忆" class="headerlink" title="切换窗口记忆"></a>切换窗口记忆</h3><p>RIPER-5 把每个任务都拆分成（研究，创新，计划）三个阶段，并且每个阶段都记录一个单独的 md 文档，如果任务中断或切换窗口，AI 可以通过读取这个文档来获取上下文。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>在使用 RIPER-5 时，同时增加了 Memory-MCP 的使用,因为项目功能之间会出现相互索引的情况，使用 Memory 能让 AI 记住这些索引关系。</p><h3 id="如何让-AI-操作变得可控"><a href="#如何让-AI-操作变得可控" class="headerlink" title="如何让 AI 操作变得可控"></a>如何让 AI 操作变得可控</h3><p>RIPER-5 在任务执行中，切换不同的模式都需要用户的旨意，如果本步骤并不满意可以直接在本步骤开始修改，而不是像传统的 AI 交互中需要重新开始。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>任务分解清晰，易于管理</li><li>每个阶段都有独立的文档，便于上下文获取</li><li>AI 操作可控，用户可以随时修改当前步骤</li><li>适用于复杂任务</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>会极大的加长单个任务完成时间</li><li>需要用户自审查</li><li>即使时一个简单的任务，也需要分解成多个阶段</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在使用 RIPER-5 时，执行复杂或长任务时，相当于把自己嵌入到 AI 的工作流中，确实效果非常惊艳，尤其是对于需要多次迭代的任务。<br>但是对于简单任务，RIPER-5 很容易让功能过度复杂化，降低工作效率。目前我的方案时不放在规则文档中，而是在需要使用时手动引用。</p><h2 id="我使用的-RIPER-5"><a href="#我使用的-RIPER-5" class="headerlink" title="我使用的 RIPER-5"></a>我使用的 RIPER-5</h2><p>我自己使用的 RIPER-5 提示词，主要是基于原版的修改，增加了 Memory-MCP 的使用。更适配Unity开发。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># CLAUDE.md</span><br><br><span class="hljs-strong">**请严格遵循 CLAUDE.md 的开发流程和规范。**</span><br><br><span class="hljs-section">### Basic</span><br><br>使用中文和我交流。<br><br><span class="hljs-section">### <span class="hljs-strong">**Role &amp; Mission**</span></span><br><br>You are an <span class="hljs-strong">**Expert AI Development Partner**</span>. Your core mission is to guide the user from an initial feature concept through a rigorous, structured workflow, transforming it into a well-documented, thoughtfully designed, and fully implementable feature. You must strictly and meticulously follow all instructions below.<br><br><span class="hljs-section">### <span class="hljs-strong">**Guiding Principles**</span></span><br><br><span class="hljs-bullet">1.</span> <span class="hljs-strong">**Standards First**</span>: All code output must adhere to the following specifications.<br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**Error-Free Execution**</span>: Code must compile and run without unexpected errors before delivery.<br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**Low Garbage Collection (Low GC)**</span>: Performance is critical. Strictly avoid unnecessary memory allocations (<span class="hljs-code">`new`</span>) within <span class="hljs-code">`Update`</span>, loops, or frequently called functions.<br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**Single Responsibility**</span>: Every file, script, and class must have one, and only one, clear responsibility.<br><span class="hljs-bullet">2.</span> <span class="hljs-strong">**Clarity Over Speed**</span>: Documentation precedes coding. Ensure explicit user approval at every stage.<br><span class="hljs-bullet">3.</span> <span class="hljs-strong">**Proactive Collaboration**</span>: You are not a passive tool but an active partner. Proactively identify ambiguities in requirements, risks in design, and omissions in plans.<br><span class="hljs-bullet">4.</span> <span class="hljs-strong">**Traceability**</span>: All designs, tasks, and code must be traceable back to the original requirements.<br><br><span class="hljs-section">### <span class="hljs-strong">**Toolbox**</span></span><br><br>You are equipped with the following tools to assist you:<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**`repomix`**</span>: <span class="hljs-strong">**Codebase Context Tool**</span>. Use this to package and analyze the codebase when you need to understand existing architecture, dependencies, or implementation details.<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**`memory`**</span>: <span class="hljs-strong">**Project Knowledge Graph**</span>. This is your &quot;second brain&quot; and must be continuously maintained.<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**Initialization**</span>: Summarize the project overview at the beginning.<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**Pre-task Check**</span>: Before executing any task, query <span class="hljs-code">`memory`</span> for relevant context.<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**Post-task Update**</span>: After completing tasks, refactoring, or adding features, evaluate and update <span class="hljs-code">`memory`</span> to log new design decisions, module changes, or specifications.<br><br>---<br><br><span class="hljs-section">### <span class="hljs-strong">**The Core Development Workflow**</span></span><br><br>You must strictly follow the five phases below in sequential order. At the start of any interaction, first clarify the current phase.<br><br><span class="hljs-section">#### <span class="hljs-strong">**General Rule: The Approval Loop**</span></span><br><br>In Phases 1, 2, and 3, whenever you generate a core document (<span class="hljs-code">`requirements.md`</span>, <span class="hljs-code">`design.md`</span>, <span class="hljs-code">`tasks.md`</span>), you <span class="hljs-strong">**must**</span> request user approval with a direct question (e.g., &quot;Does this [document<span class="hljs-emphasis">_type] look good? If so, we can proceed to the next phase.&quot;). You are <span class="hljs-strong">**strictly forbidden**</span> from proceeding to the next phase until you receive explicit approval (e.g., &quot;Yes&quot;, &quot;Approved&quot;, &quot;Looks good&quot;).</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">---</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">#### <span class="hljs-strong">**Phase 1: Requirements Clarification**</span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- <span class="hljs-strong">**🎯 Goal**</span>: To transform a vague idea into clear, actionable, and unambiguous requirements.</span><br><span class="hljs-emphasis">- <span class="hljs-strong">**📝 Deliverable**</span>: `memory_</span>md/&#123;feature<span class="hljs-emphasis">_name&#125;/requirements.md`</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- <span class="hljs-strong">**⚙️ Process**</span>:</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">  1. <span class="hljs-strong">**Kick-off**</span>: If the user hasn&#x27;t provided a feature name, ask for one and create the file above.</span><br><span class="hljs-emphasis">  2. <span class="hljs-strong">**Draft Initial Version**</span>: Based on the user&#x27;s idea, directly generate a requirements document including user stories and EARS (Easy Approach to Requirements Syntax) acceptance criteria. Proactively include edge cases, UX considerations, and technical constraints.</span><br><span class="hljs-emphasis">  3. <span class="hljs-strong">**Formatting**</span>: Strictly follow this format:</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     ```markdown</span><br><span class="hljs-emphasis">     # Requirements Document: [Feature Name]</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     ## 1. Overview</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     [A brief introduction to the feature.]</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     ## 2. Core Requirements</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     ### 2.1 [Requirement Name 1]</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     - <span class="hljs-strong">**User Story**</span>: As a [Role], I want to [Action], so that [Benefit].</span><br><span class="hljs-emphasis">     - <span class="hljs-strong">**Acceptance Criteria**</span>:</span><br><span class="hljs-emphasis">       - [ ] (When/While/If...) [Event], the system shall [Response].</span><br><span class="hljs-emphasis">       - [ ] (When/While/If...) [Event], the system shall [Response].</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     ### 2.2 [Requirement Name 2]</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">     ...</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>Iterate &amp; Approve</strong>: Initiate the <strong>Approval Loop</strong>. Continuously revise based on user feedback until approval is granted.</li></ol><h4 id="Phase-2-Design-Documentation"><a href="#Phase-2-Design-Documentation" class="headerlink" title="Phase 2: Design Documentation"></a><strong>Phase 2: Design Documentation</strong></h4><ul><li><p><strong>🎯 Goal</strong>: To create a comprehensive technical design based on the approved requirements.</p></li><li><p><strong>📝 Deliverable</strong>: <code>memory_md/&#123;feature_name&#125;/design.md</code></p></li><li><p><strong>⚙️ Process</strong>:</p><ol><li><strong>Research</strong>: If necessary, use <code>repomix</code> to analyze existing code or perform web searches to inform design decisions.</li><li><strong>Document Generation</strong>: Create the design document, which <strong>must</strong> include the following sections and use Mermaid.js syntax for all diagrams:<ul><li><strong>Overview</strong>: Design goals and approach.</li><li><strong>Architecture Diagram</strong>: High-level system components and their interactions (use a Mermaid diagram).</li><li><strong>Key Flowcharts</strong>: The flow of critical business logic (use a Mermaid flowchart).</li><li><strong>Data Models &#x2F; Components</strong>: Major classes, data structures, and their relationships (use a Mermaid class diagram).</li><li><strong>Interface Definitions</strong>: APIs for external or inter-module communication.</li><li><strong>Error Handling</strong>: Strategy for key failure scenarios.</li><li><strong>Performance Considerations</strong>: Identify potential bottlenecks, linking back to the <strong>Low GC Principle</strong>.</li></ul></li><li><strong>Traceability</strong>: Ensure every design point clearly maps to at least one acceptance criterion in <code>requirements.md</code>.</li><li><strong>Iterate &amp; Approve</strong>: Initiate the <strong>Approval Loop</strong>. Revise based on feedback until approved.</li></ol></li></ul><h4 id="Phase-3-Implementation-Plan"><a href="#Phase-3-Implementation-Plan" class="headerlink" title="Phase 3: Implementation Plan"></a><strong>Phase 3: Implementation Plan</strong></h4><ul><li><p><strong>🎯 Goal</strong>: To break down the design into a sequence of specific, executable, coding-oriented tasks.</p></li><li><p><strong>📝 Deliverable</strong>: <code>memory_md/&#123;feature_name&#125;/tasks.md</code></p></li><li><p><strong>⚙️ Process</strong>:</p><ol><li><p><strong>Task Breakdown</strong>: Decompose each part of the <code>design.md</code> into small, discrete coding tasks. Prioritize a TDD (Test-Driven Development) approach by creating testing tasks before implementation tasks.</p></li><li><p><strong>Formatting</strong>: The task list must be a numbered list with checkboxes.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Implementation Plan: [Feature Name]</span><br><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-strong">**1. Task Group: [e.g., Setup Basic Structure]**</span><br><span class="hljs-bullet">  -</span> [ ] 1.1 Create file <span class="hljs-code">`[FilePath]`</span> and define the <span class="hljs-code">`[ClassName]`</span> class. (Maps to Req: 2.1)<br><span class="hljs-bullet">  -</span> [ ] 1.2 Add test case <span class="hljs-code">`[TestPath]`</span> for <span class="hljs-code">`[ClassName]`</span> covering [scenario]. (Maps to Req: 2.1)<br><span class="hljs-bullet">-</span> [ ] <span class="hljs-strong">**2. Task Group: [e.g., Implement Core Logic]**</span><br><span class="hljs-bullet">  -</span> [ ] 2.1 Implement the <span class="hljs-code">`[MethodName]`</span> method. (Maps to Req: 2.2)<br></code></pre></td></tr></table></figure></li><li><p><strong>Task Constraints</strong>:</p><ul><li><strong>Must be a coding task</strong>: Only include writing&#x2F;modifying code or tests.</li><li><strong>Must reference requirements</strong>: Each task must end with <code>(Maps to Req: X.Y)</code> referencing a specific item in <code>requirements.md</code>.</li><li><strong>❌ Strictly Prohibited</strong>: Do not include non-coding tasks like user testing, deployment, data collection, or manual application runs.</li></ul></li><li><p><strong>Iterate &amp; Approve</strong>: Initiate the <strong>Approval Loop</strong>. This is the final step of the planning phase. Once approved, the planning workflow is complete.</p></li></ol></li></ul><h4 id="Phase-4-Task-Execution"><a href="#Phase-4-Task-Execution" class="headerlink" title="Phase 4: Task Execution"></a><strong>Phase 4: Task Execution</strong></h4><ul><li><p><strong>🎯 Goal</strong>: To complete the coding tasks from the implementation plan one by one, with precision.</p></li><li><p><strong>📝 Deliverable</strong>: Source code, test code.</p></li><li><p><strong>⚙️ Process</strong>:</p><ol><li><strong>Announce Phase Transition</strong>: At the start of this phase, clearly state: “Planning is complete. We can now begin coding. Please tell me which task you’d like to start with, or I can recommend the first one.”</li><li><strong>Context Loading</strong>: Before executing any task, you <strong>must</strong> review the full contents of <code>requirements.md</code>, <code>design.md</code>, and <code>tasks.md</code>.</li><li><strong>Single-Task Execution</strong>:<ul><li>Wait for the user’s instruction or proactively recommend the next uncompleted task.</li><li><strong>Core Rule: Execute one task at a time</strong>. If a task has sub-tasks, start with the first sub-task.</li><li>Actively use <code>repomix</code> and <code>memory</code> for context while performing the task.</li><li>Strictly adhere to the coding specifications in the <strong>Guiding Principles</strong>.</li></ul></li><li><strong>Stop After Execution</strong>: After completing one task, <strong>stop immediately</strong>. Report your completion and wait for the user’s next instruction (e.g., to review code, proceed to the next task). <strong>Never proceed to the next task automatically.</strong></li></ol></li></ul><h4 id="Phase-5-Task-Logging-Closure"><a href="#Phase-5-Task-Logging-Closure" class="headerlink" title="Phase 5: Task Logging &amp; Closure"></a><strong>Phase 5: Task Logging &amp; Closure</strong></h4><ul><li><strong>🎯 Goal</strong>: To ensure every completed task is logged, keeping project knowledge synchronized.</li><li><strong>⚙️ Process</strong>:<ol><li><strong>Status Update</strong>: After the user confirms a task is complete, use the <code>memory</code> MCP tool to update its status. The log should be clear and easily searchable.</li><li><strong>Knowledge Persistence</strong>: If new, important information arose during task execution (e.g., an unexpected technical decision), update the <code>memory</code> knowledge graph immediately.</li><li><strong>Continuous Loop</strong>: Continue executing Phase 4 and 5 until all tasks in <code>tasks.md</code> are complete or the user decides to stop.</li></ol></li></ul><pre><code>## 参考[RIPER-5](https://forum.cursor.com/t/i-created-an-amazing-mode-called-riper-5-mode-fixes-claude-3-7-drastically/65516)   [烟雨迷离半世殇](https://www.lfzxb.top/aigc-in-game-dev/)</code></pre>]]></content>
    
    
    <categories>
      
      <category>AI Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ClaudeCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>短记-如何使用ClaudeCode</title>
    <link href="/2025/07/21/Short%20Note%20-%20How%20to%20Use%20ClaudeCode/"/>
    <url>/2025/07/21/Short%20Note%20-%20How%20to%20Use%20ClaudeCode/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近经常听到关于 Claude Code 编码速度慢的问题。本文将简短记录一下我是如何使用 claude code。</p><h2 id="其一，“多窗口”总体加速"><a href="#其一，“多窗口”总体加速" class="headerlink" title="其一，“多窗口”总体加速"></a>其一，“多窗口”总体加速</h2><p>终端的多窗口其实是一个被很多人忽略的东西，因为以前都在编辑器内嵌的 UI 中跟 AI 对话。习惯于在同一个对话框中进行交流。<br>以下是我日常开发的窗口我对窗口的理解是将自己代入任务分配者的视角，如果一个窗口已经有任务，并且没法快速腾出时间，那就新加窗口。<br><img src="/../images/Pasted%20image%2020250721105754.png" alt="a"></p><h2 id="其二，“MCP”单个加速"><a href="#其二，“MCP”单个加速" class="headerlink" title="其二，“MCP”单个加速"></a>其二，“MCP”单个加速</h2><p>我对 MCP 的理解是 AI 在对话中的上下文补全，Claude Code 对 MCP 的调用积极性是我使用过的 AI 编码工具中最积极的。如果使用合适的 MCP 是可以加快单个对话的完成时间的，因为好的 MCP 可以加快 AI 获取上下文的速度<br>列几个我推荐的 MCP：<br><a href="https://github.com/yamadashy/repomix">yamadashy&#x2F;repomix:</a> ： 用于项目初始化（推荐）<br><a href="https://github.com/oraios/serena">oraios&#x2F;serena</a>： 增强 AI 对语言的操作（强烈推荐）<br><a href="https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem">servers&#x2F;src&#x2F;filesystem</a>：文件相关操作（推荐）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CLaude Code 处理任务基本上都是分钟级的，对比其他 AI 代理来说它的速度确实不是优势，但是我依然使用 Claude Code 是因为它是我使用下来准确率和任务完成度最高的一个工具。</p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 预加载系统设计与实现</title>
    <link href="/2025/07/14/Unity_Preload_System_Design_and_Implementation/"/>
    <url>/2025/07/14/Unity_Preload_System_Design_and_Implementation/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近在开发一个微信小游戏，因为是 3D + 关卡制的，并且希望保证一个流畅的游戏体验，希望在关卡切换的时候没有 loading 过程，因此设计了一个预加载系统。</p><h2 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h2><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><p>预加载系统主要由三个核心组件构成：</p><ol><li><strong>PreloadConfig</strong> - 预加载配置类</li><li><strong>PreloadPoolItem</strong> - 预加载池项目类</li><li><strong>PreloadManager</strong> - 预加载管理器（核心）</li></ol><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul><li><strong>低 GC 设计</strong>：避免频繁的内存分配，采用对象池复用机制</li><li><strong>异步加载</strong>：使用 UniTask 实现异步加载，避免主线程卡顿</li><li><strong>按需启动</strong>：协程按需启动，避免不必要的资源消耗</li><li><strong>智能清理</strong>：自动清理长时间未使用的对象</li></ul><h2 id="核心功能实现"><a href="#核心功能实现" class="headerlink" title="核心功能实现"></a>核心功能实现</h2><h3 id="1-预加载配置系统"><a href="#1-预加载配置系统" class="headerlink" title="1. 预加载配置系统"></a>1. 预加载配置系统</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadConfig</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> location;           <span class="hljs-comment">// 资源路径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> preloadCount = <span class="hljs-number">1</span>;      <span class="hljs-comment">// 预加载数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> priority = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 优先级</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> autoExpand = <span class="hljs-literal">false</span>;   <span class="hljs-comment">// 自动扩容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> maxCount = <span class="hljs-number">10</span>;         <span class="hljs-comment">// 最大数量限制</span><br>&#125;<br></code></pre></td></tr></table></figure><p>配置系统支持：</p><ul><li>灵活的预加载数量控制</li><li>优先级排序机制</li><li>自动扩容功能</li><li>最大数量限制</li></ul><h3 id="2-对象池项目管理"><a href="#2-对象池项目管理" class="headerlink" title="2. 对象池项目管理"></a>2. 对象池项目管理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadPoolItem</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject gameObject;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isInUse;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> createTime;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> lastUseTime;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> useCount;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个池项目包含：</p><ul><li>对象引用和使用状态</li><li>创建时间和最后使用时间</li><li>使用次数统计</li></ul><h3 id="3-预加载机制"><a href="#3-预加载机制" class="headerlink" title="3. 预加载机制"></a>3. 预加载机制</h3><p>系统采用队列式预加载，支持：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 添加预加载配置</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddPreloadConfig</span>(<span class="hljs-params">PreloadConfig config</span>)</span><br>&#123;<br>    _preloadQueue.Enqueue(config);<br>    StartPreloadCoroutineIfNeeded();<br>&#125;<br><br><span class="hljs-comment">// 按需启动预加载协程</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartPreloadCoroutineIfNeeded</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!_isPreloadCoroutineRunning &amp;&amp; _preloadQueue.Count &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        _isPreloadCoroutineRunning = <span class="hljs-literal">true</span>;<br>        PreloadCoroutine().Forget();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-对象获取与归还"><a href="#4-对象获取与归还" class="headerlink" title="4. 对象获取与归还"></a>4. 对象获取与归还</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 从池中获取对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">GetFromPool</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, Transform parent = <span class="hljs-literal">null</span></span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!_preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!item.isInUse)<br>        &#123;<br>            item.isInUse = <span class="hljs-literal">true</span>;<br>            item.useCount++;<br>            item.lastUseTime = Time.time;<br><br>            <span class="hljs-keyword">var</span> go = item.gameObject;<br>            go.SetActive(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">// 重置Transform状态</span><br>            go.transform.localPosition = Vector3.zero;<br>            go.transform.localRotation = Quaternion.identity;<br>            go.transform.localScale = Vector3.one;<br><br>            <span class="hljs-keyword">return</span> go;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="性能优化策略"><a href="#性能优化策略" class="headerlink" title="性能优化策略"></a>性能优化策略</h2><h3 id="1-分帧加载"><a href="#1-分帧加载" class="headerlink" title="1. 分帧加载"></a>1. 分帧加载</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 每加载一定数量后等待一帧</span><br><span class="hljs-keyword">if</span> (i % maxLoadPerFrame == maxLoadPerFrame - <span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-keyword">await</span> UniTask.Yield();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过控制每帧最大加载数量，避免加载过程中的卡顿。</p><h3 id="2-自动清理机制"><a href="#2-自动清理机制" class="headerlink" title="2. 自动清理机制"></a>2. 自动清理机制</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CleanupIdleObjects</span>()</span><br>&#123;<br>    <span class="hljs-keyword">var</span> currentTime = Time.time;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!item.isInUse &amp;&amp; (currentTime - item.createTime) &gt; maxIdleTime)<br>        &#123;<br>            <span class="hljs-comment">// 清理长时间未使用的对象</span><br>            itemsToRemove.Add(item);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定期清理长时间未使用的对象，防止内存泄漏。</p><h3 id="3-协程状态管理"><a href="#3-协程状态管理" class="headerlink" title="3. 协程状态管理"></a>3. 协程状态管理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> _isPreloadCoroutineRunning = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> _isCleanupCoroutineRunning = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>通过状态标记避免重复启动协程，提高系统效率。</p><h2 id="调试与监控"><a href="#调试与监控" class="headerlink" title="调试与监控"></a>调试与监控</h2><p>系统提供完整的调试信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadManagerDebugInfo</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> totalPoolCount;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> totalObjectCount;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> inUseCount;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> queueCount;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isPreloadCoroutineRunning;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isCleanupCoroutineRunning;<br>    <span class="hljs-keyword">public</span> List&lt;PreloadPoolDebugInfo&gt; pools;<br>&#125;<br></code></pre></td></tr></table></figure><p>支持：</p><ul><li>实时池状态监控</li><li>对象使用情况统计</li><li>协程运行状态跟踪</li><li>详细的调试信息输出</li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 添加预加载配置</span><br><span class="hljs-keyword">var</span> config = <span class="hljs-keyword">new</span> PreloadConfig(<span class="hljs-string">&quot;UI/Button&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>);<br>PreloadManager.Instance.AddPreloadConfig(config);<br><br><span class="hljs-comment">// 获取预加载对象</span><br><span class="hljs-keyword">var</span> button = PreloadManager.Instance.GetFromPool(<span class="hljs-string">&quot;UI/Button&quot;</span>, parent);<br><span class="hljs-keyword">if</span> (button == <span class="hljs-literal">null</span>)<br>&#123;<br>    <span class="hljs-comment">// 回退到直接加载</span><br>    button = <span class="hljs-keyword">await</span> ResourceModule.Instance.LoadGameObjectAsync(<span class="hljs-string">&quot;UI/Button&quot;</span>, parent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批量预加载"><a href="#批量预加载" class="headerlink" title="批量预加载"></a>批量预加载</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> configs = <span class="hljs-keyword">new</span> List&lt;PreloadConfig&gt;<br>&#123;<br>    <span class="hljs-keyword">new</span> PreloadConfig(<span class="hljs-string">&quot;UI/Button&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-keyword">new</span> PreloadConfig(<span class="hljs-string">&quot;Effect/Explosion&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">new</span> PreloadConfig(<span class="hljs-string">&quot;Audio/BGM&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>)<br>&#125;;<br>PreloadManager.Instance.AddPreloadConfigs(configs);<br></code></pre></td></tr></table></figure><h3 id="立即预加载"><a href="#立即预加载" class="headerlink" title="立即预加载"></a>立即预加载</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 立即预加载指定资源</span><br><span class="hljs-keyword">await</span> PreloadManager.Instance.PreloadImmediately(<span class="hljs-string">&quot;UI/Dialog&quot;</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><strong>并不能复制粘贴直接使用</strong>，代码只做示例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> Cysharp.Threading.Tasks;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">EF</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 预加载项配置</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    [<span class="hljs-meta">System.Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadConfig</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> location;           <span class="hljs-comment">// 资源路径</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> preloadCount = <span class="hljs-number">1</span>;      <span class="hljs-comment">// 预加载数量</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> priority = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 优先级，数值越大越优先</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> autoExpand = <span class="hljs-literal">false</span>;   <span class="hljs-comment">// 是否自动扩容</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> maxCount = <span class="hljs-number">10</span>;         <span class="hljs-comment">// 最大数量限制</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PreloadConfig</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, <span class="hljs-built_in">int</span> preloadCount = <span class="hljs-number">1</span>, <span class="hljs-built_in">int</span> priority = <span class="hljs-number">0</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">this</span>.location = location;<br>            <span class="hljs-keyword">this</span>.preloadCount = preloadCount;<br>            <span class="hljs-keyword">this</span>.priority = priority;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 预加载池项目</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadPoolItem</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> GameObject gameObject;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isInUse;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> createTime;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> lastUseTime;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> useCount;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PreloadPoolItem</span>(<span class="hljs-params">GameObject go</span>)</span><br>        &#123;<br>            gameObject = go;<br>            isInUse = <span class="hljs-literal">false</span>;<br>            createTime = Time.time;<br>            lastUseTime = Time.time;<br>            useCount = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 预加载管理器</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadManager</span> : <span class="hljs-title">BehaviourSingleton</span>&lt;<span class="hljs-title">PreloadManager</span>&gt;<br>    &#123;<br><br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;预加载设置&quot;</span>)</span>]<br>        [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> maxLoadPerFrame = <span class="hljs-number">1</span>;           <span class="hljs-comment">// 每帧最大加载数量</span><br>        [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> loadInterval = <span class="hljs-number">0.016f</span>;       <span class="hljs-comment">// 加载间隔（秒）</span><br>        [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> enableAutoCleanup = <span class="hljs-literal">false</span>;     <span class="hljs-comment">// 是否启用自动清理</span><br>        [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> cleanupInterval = <span class="hljs-number">60f</span>;       <span class="hljs-comment">// 清理间隔（秒）</span><br>        [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> maxIdleTime = <span class="hljs-number">300f</span>;          <span class="hljs-comment">// 最大空闲时间（秒）</span><br><br>        <span class="hljs-comment">// 预加载池字典 location -&gt; List&lt;PreloadPoolItem&gt;</span><br>        <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, List&lt;PreloadPoolItem&gt;&gt; _preloadPools = <span class="hljs-keyword">new</span>();<br><br>        <span class="hljs-comment">// 预加载队列</span><br>        <span class="hljs-keyword">private</span> Queue&lt;PreloadConfig&gt; _preloadQueue = <span class="hljs-keyword">new</span>();<br><br>        <span class="hljs-comment">// 正在预加载的位置集合</span><br>        <span class="hljs-keyword">private</span> HashSet&lt;<span class="hljs-built_in">string</span>&gt; _loadingLocations = <span class="hljs-keyword">new</span>();<br><br>        <span class="hljs-comment">// 预加载根节点</span><br>        <span class="hljs-keyword">private</span> Transform _preloadRoot;<br><br>        <span class="hljs-comment">// 协程状态跟踪</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> _isPreloadCoroutineRunning = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> _isCleanupCoroutineRunning = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 性能统计</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> TotalPreloadedCount =&gt; GetTotalPreloadedCount();<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> InUseCount =&gt; GetInUseCount();<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_instance == <span class="hljs-literal">null</span>)<br>            &#123;<br>                _instance = <span class="hljs-keyword">this</span>;<br>                InitializePreloadRoot();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_instance != <span class="hljs-keyword">this</span>)<br>            &#123;<br>                Destroy(gameObject);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializePreloadRoot</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> rootGO = <span class="hljs-keyword">new</span> GameObject(<span class="hljs-string">&quot;PreloadPool&quot;</span>);<br>            rootGO.transform.SetParent(transform);<br>            rootGO.SetActive(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 隐藏预加载对象</span><br>            _preloadRoot = rootGO.transform;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 启动预加载协程（按需启动）</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartPreloadCoroutineIfNeeded</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_isPreloadCoroutineRunning &amp;&amp; _preloadQueue.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                _isPreloadCoroutineRunning = <span class="hljs-literal">true</span>;<br>                PreloadCoroutine().Forget();<br>                Log.Info(<span class="hljs-string">&quot;Started PreloadCoroutine&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 启动清理协程（按需启动）</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StartCleanupCoroutineIfNeeded</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (enableAutoCleanup &amp;&amp; !_isCleanupCoroutineRunning &amp;&amp; HasObjectsToCleanup())<br>            &#123;<br>                _isCleanupCoroutineRunning = <span class="hljs-literal">true</span>;<br>                CleanupCoroutine().Forget();<br>                Log.Info(<span class="hljs-string">&quot;Started CleanupCoroutine&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 检查是否有需要清理的对象</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">HasObjectsToCleanup</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> _preloadPools.Count &gt; <span class="hljs-number">0</span> &amp;&amp; TotalPreloadedCount &gt; <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">region</span> 公共API</span><br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 添加预加载配置</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddPreloadConfig</span>(<span class="hljs-params">PreloadConfig config</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(config.location))<br>            &#123;<br>                Log.Warning(<span class="hljs-string">&quot;PreloadConfig location is null or empty&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果已经在加载队列中，跳过</span><br>            <span class="hljs-keyword">if</span> (_loadingLocations.Contains(config.location))<br>            &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            _preloadQueue.Enqueue(config);<br>            Log.Info(<span class="hljs-string">$&quot;Added preload config for <span class="hljs-subst">&#123;config.location&#125;</span>, count: <span class="hljs-subst">&#123;config.preloadCount&#125;</span>&quot;</span>);<br><br>            <span class="hljs-comment">// 检查是否需要启动预加载协程</span><br>            StartPreloadCoroutineIfNeeded();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 批量添加预加载配置</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddPreloadConfigs</span>(<span class="hljs-params">List&lt;PreloadConfig&gt; configs</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> config <span class="hljs-keyword">in</span> configs)<br>            &#123;<br>                AddPreloadConfig(config);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 尝试从预加载池获取对象</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">GetFromPool</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, Transform parent = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool) || pool.Count == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            List&lt;PreloadPoolItem&gt; items = <span class="hljs-keyword">new</span> List&lt;PreloadPoolItem&gt;();<br><br>            <span class="hljs-comment">// 查找未使用的对象</span><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!item.isInUse)<br>                &#123;<br>                    item.isInUse = <span class="hljs-literal">true</span>;<br>                    item.useCount++;<br>                    item.lastUseTime = Time.time;<br><br>                    <span class="hljs-keyword">var</span> go = item.gameObject;<br>                    go.SetActive(<span class="hljs-literal">true</span>);<br><br>                    <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        go.transform.SetParent(parent);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        go.transform.SetParent(<span class="hljs-literal">null</span>);<br>                    &#125;<br><br>                    <span class="hljs-comment">// 重置位置和旋转</span><br>                    go.transform.localPosition = Vector3.zero;<br>                    go.transform.localRotation = Quaternion.identity;<br>                    go.transform.localScale = Vector3.one;<br><br>                    Log.Info(<span class="hljs-string">$&quot;从预加载池获取对象: <span class="hljs-subst">&#123;location&#125;</span>&quot;</span>);<br><br>                    <span class="hljs-comment">// 检查是否需要启动清理协程</span><br>                    StartCleanupCoroutineIfNeeded();<br>                    items.Add(item);<br>                    <span class="hljs-keyword">return</span> go;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 使用后直接直接丢弃，不保留引用。防止外部destroy导致无法回收</span><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> items)<br>            &#123;<br>                _preloadPools[location].Remove(item);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 归还对象到预加载池</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReturnToPool</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, GameObject go</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 如果归还对象 新增到预加载池</span><br>            <span class="hljs-keyword">if</span> (_preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool))<br>            &#123;<br>                pool.Add(<span class="hljs-keyword">new</span> PreloadPoolItem(go));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 立即预加载指定资源</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> UniTask <span class="hljs-title">PreloadImmediately</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location, <span class="hljs-built_in">int</span> count = <span class="hljs-number">1</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> config = <span class="hljs-keyword">new</span> PreloadConfig(location, count, <span class="hljs-built_in">int</span>.MaxValue);<br>            <span class="hljs-keyword">await</span> PreloadAsset(config);<br><br>            <span class="hljs-comment">// 预加载完成后检查是否需要启动清理协程</span><br>            StartCleanupCoroutineIfNeeded();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 清理指定资源的预加载池</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClearPool</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool))<br>            &#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (item.gameObject != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        Destroy(item.gameObject);<br>                    &#125;<br>                &#125;<br>                pool.Clear();<br>                _preloadPools.Remove(location);<br>                Log.Info(<span class="hljs-string">$&quot;Cleared preload pool: <span class="hljs-subst">&#123;location&#125;</span>&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 清理所有预加载池</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClearAllPools</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> kvp <span class="hljs-keyword">in</span> _preloadPools)<br>            &#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> kvp.Value)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (item.gameObject != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        Destroy(item.gameObject);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            _preloadPools.Clear();<br>            _loadingLocations.Clear();<br>            Log.Info(<span class="hljs-string">&quot;Cleared all preload pools&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取池中可用对象数量</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetAvailableCount</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool))<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!item.isInUse)<br>                    count++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> count;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取池中总对象数量</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetTotalCount</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> _preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool) ? pool.Count : <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>        <span class="hljs-meta">#<span class="hljs-keyword">region</span> 内部逻辑</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> UniTaskVoid <span class="hljs-title">PreloadCoroutine</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (_preloadQueue.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">var</span> config = _preloadQueue.Dequeue();<br>                <span class="hljs-keyword">await</span> PreloadAsset(config);<br><br>                <span class="hljs-comment">// 控制加载频率</span><br>                <span class="hljs-keyword">await</span> UniTask.Delay((<span class="hljs-built_in">int</span>)(loadInterval * <span class="hljs-number">1000</span>));<br>            &#125;<br><br>            <span class="hljs-comment">// 队列为空，停止协程</span><br>            _isPreloadCoroutineRunning = <span class="hljs-literal">false</span>;<br>            Log.Info(<span class="hljs-string">&quot;PreloadCoroutine stopped - queue is empty&quot;</span>);<br><br>            <span class="hljs-comment">// 预加载完成后检查是否需要启动清理协程</span><br>            StartCleanupCoroutineIfNeeded();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> UniTask <span class="hljs-title">PreloadAsset</span>(<span class="hljs-params">PreloadConfig config</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_loadingLocations.Contains(config.location))<br>                <span class="hljs-keyword">return</span>;<br><br>            _loadingLocations.Add(config.location);<br><br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!_preloadPools.ContainsKey(config.location))<br>                &#123;<br>                    _preloadPools[config.location] = <span class="hljs-keyword">new</span> List&lt;PreloadPoolItem&gt;();<br>                &#125;<br><br>                <span class="hljs-keyword">var</span> pool = _preloadPools[config.location];<br>                <span class="hljs-built_in">int</span> currentCount = pool.Count;<br>                <span class="hljs-built_in">int</span> targetCount = config.preloadCount;<br><br>                <span class="hljs-comment">// 如果当前数量已经足够，跳过</span><br>                <span class="hljs-keyword">if</span> (currentCount &gt;= targetCount)<br>                &#123;<br>                    Log.Info(<span class="hljs-string">$&quot;Preload pool already has enough objects: <span class="hljs-subst">&#123;config.location&#125;</span> (<span class="hljs-subst">&#123;currentCount&#125;</span>/<span class="hljs-subst">&#123;targetCount&#125;</span>)&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-built_in">int</span> loadCount = targetCount - currentCount;<br><br>                Log.Info(<span class="hljs-string">$&quot;Start preloading <span class="hljs-subst">&#123;config.location&#125;</span>, count: <span class="hljs-subst">&#123;loadCount&#125;</span>&quot;</span>);<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; loadCount; i++)<br>                &#123;<br>                    <span class="hljs-keyword">try</span><br>                    &#123;<br>                        <span class="hljs-keyword">var</span> go = <span class="hljs-keyword">await</span> ResourceModule.Instance.LoadGameObjectAsync(config.location, _preloadRoot);<br>                        <span class="hljs-keyword">if</span> (go != <span class="hljs-literal">null</span>)<br>                        &#123;<br>                            go.SetActive(<span class="hljs-literal">false</span>);<br>                            <span class="hljs-keyword">var</span> poolItem = <span class="hljs-keyword">new</span> PreloadPoolItem(go);<br>                            pool.Add(poolItem);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (Exception e)<br>                    &#123;<br>                        Log.Error(<span class="hljs-string">$&quot;Failed to preload <span class="hljs-subst">&#123;config.location&#125;</span>: <span class="hljs-subst">&#123;e.Message&#125;</span>&quot;</span>);<br>                    &#125;<br><br>                    <span class="hljs-comment">// 每加载一定数量后等待一帧，避免卡顿</span><br>                    <span class="hljs-keyword">if</span> (i % maxLoadPerFrame == maxLoadPerFrame - <span class="hljs-number">1</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">await</span> UniTask.Yield();<br>                    &#125;<br>                &#125;<br><br>                Log.Info(<span class="hljs-string">$&quot;Preload completed: <span class="hljs-subst">&#123;config.location&#125;</span>, loaded: <span class="hljs-subst">&#123;loadCount&#125;</span>&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">finally</span><br>            &#123;<br>                _loadingLocations.Remove(config.location);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> UniTaskVoid <span class="hljs-title">CleanupCoroutine</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (HasObjectsToCleanup())<br>            &#123;<br>                <span class="hljs-keyword">await</span> UniTask.Delay((<span class="hljs-built_in">int</span>)(cleanupInterval * <span class="hljs-number">1000</span>));<br><br>                <span class="hljs-keyword">if</span> (HasObjectsToCleanup())<br>                &#123;<br>                    CleanupIdleObjects();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 没有需要清理的对象，停止协程</span><br>            _isCleanupCoroutineRunning = <span class="hljs-literal">false</span>;<br>            Log.Info(<span class="hljs-string">&quot;CleanupCoroutine stopped - no objects to cleanup&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CleanupIdleObjects</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> currentTime = Time.time;<br>            <span class="hljs-keyword">var</span> locationsToRemove = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> kvp <span class="hljs-keyword">in</span> _preloadPools)<br>            &#123;<br>                <span class="hljs-keyword">var</span> location = kvp.Key;<br>                <span class="hljs-keyword">var</span> pool = kvp.Value;<br>                <span class="hljs-keyword">var</span> itemsToRemove = <span class="hljs-keyword">new</span> List&lt;PreloadPoolItem&gt;();<br><br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>                &#123;<br>                    <span class="hljs-comment">// 清理长时间未使用的对象</span><br>                    <span class="hljs-keyword">if</span> (!item.isInUse &amp;&amp; (currentTime - item.createTime) &gt; maxIdleTime)<br>                    &#123;<br>                        itemsToRemove.Add(item);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> itemsToRemove)<br>                &#123;<br>                    pool.Remove(item);<br>                    <span class="hljs-keyword">if</span> (item.gameObject != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        Destroy(item.gameObject);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (pool.Count == <span class="hljs-number">0</span>)<br>                &#123;<br>                    locationsToRemove.Add(location);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> location <span class="hljs-keyword">in</span> locationsToRemove)<br>            &#123;<br>                _preloadPools.Remove(location);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (locationsToRemove.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                Log.Info(<span class="hljs-string">$&quot;Cleanup completed, removed <span class="hljs-subst">&#123;locationsToRemove.Count&#125;</span> empty pools&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetTotalPreloadedCount</span>()</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> total = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> pool <span class="hljs-keyword">in</span> _preloadPools.Values)<br>            &#123;<br>                total += pool.Count;<br>            &#125;<br>            <span class="hljs-keyword">return</span> total;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetInUseCount</span>()</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> inUse = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> pool <span class="hljs-keyword">in</span> _preloadPools.Values)<br>            &#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (item.isInUse)<br>                        inUse++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> inUse;<br>        &#125;<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            _isPreloadCoroutineRunning = <span class="hljs-literal">false</span>;<br>            _isCleanupCoroutineRunning = <span class="hljs-literal">false</span>;<br>            ClearAllPools();<br>        &#125;<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">region</span> Debug信息</span><br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 预加载池调试信息</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadPoolDebugInfo</span><br>        &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> location;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> totalCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> availableCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> inUseCount;<br>            <span class="hljs-keyword">public</span> List&lt;PreloadItemDebugInfo&gt; items;<br>            <span class="hljs-keyword">public</span> PreloadConfig config;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 预加载项调试信息</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadItemDebugInfo</span><br>        &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isInUse;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> createTime;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> lastUseTime;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> useCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> gameObjectName;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isGameObjectNull;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 预加载管理器调试信息</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PreloadManagerDebugInfo</span><br>        &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> totalPoolCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> totalObjectCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> inUseCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> queueCount;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isPreloadCoroutineRunning;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isCleanupCoroutineRunning;<br>            <span class="hljs-keyword">public</span> List&lt;PreloadPoolDebugInfo&gt; pools;<br>            <span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; loadingLocations;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> enableAutoCleanup;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> cleanupInterval;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> maxIdleTime;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取详细调试信息</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> PreloadManagerDebugInfo <span class="hljs-title">GetDetailedDebugInfo</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> info = <span class="hljs-keyword">new</span> PreloadManagerDebugInfo<br>            &#123;<br>                totalPoolCount = _preloadPools.Count,<br>                totalObjectCount = TotalPreloadedCount,<br>                inUseCount = InUseCount,<br>                queueCount = _preloadQueue.Count,<br>                isPreloadCoroutineRunning = _isPreloadCoroutineRunning,<br>                isCleanupCoroutineRunning = _isCleanupCoroutineRunning,<br>                pools = <span class="hljs-keyword">new</span> List&lt;PreloadPoolDebugInfo&gt;(),<br>                loadingLocations = _loadingLocations.ToList(),<br>                enableAutoCleanup = enableAutoCleanup,<br>                cleanupInterval = cleanupInterval,<br>                maxIdleTime = maxIdleTime<br>            &#125;;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> kvp <span class="hljs-keyword">in</span> _preloadPools)<br>            &#123;<br>                <span class="hljs-keyword">var</span> poolInfo = <span class="hljs-keyword">new</span> PreloadPoolDebugInfo<br>                &#123;<br>                    location = kvp.Key,<br>                    totalCount = kvp.Value.Count,<br>                    availableCount = GetAvailableCount(kvp.Key),<br>                    inUseCount = kvp.Value.Count(item =&gt; item.isInUse),<br>                    items = <span class="hljs-keyword">new</span> List&lt;PreloadItemDebugInfo&gt;()<br>                &#125;;<br><br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> kvp.Value)<br>                &#123;<br>                    <span class="hljs-keyword">var</span> itemInfo = <span class="hljs-keyword">new</span> PreloadItemDebugInfo<br>                    &#123;<br>                        isInUse = item.isInUse,<br>                        createTime = item.createTime,<br>                        lastUseTime = item.lastUseTime,<br>                        useCount = item.useCount,<br>                        gameObjectName = item.gameObject != <span class="hljs-literal">null</span> ? item.gameObject.name : <span class="hljs-string">&quot;null&quot;</span>,<br>                        isGameObjectNull = item.gameObject == <span class="hljs-literal">null</span><br>                    &#125;;<br>                    poolInfo.items.Add(itemInfo);<br>                &#125;<br><br>                info.pools.Add(poolInfo);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> info;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取简单调试信息（向后兼容）</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">GetDebugInfo</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> info = <span class="hljs-string">$&quot;预加载池统计:\n&quot;</span>;<br>            info += <span class="hljs-string">$&quot;总池数量: <span class="hljs-subst">&#123;_preloadPools.Count&#125;</span>\n&quot;</span>;<br>            info += <span class="hljs-string">$&quot;总对象数: <span class="hljs-subst">&#123;TotalPreloadedCount&#125;</span>\n&quot;</span>;<br>            info += <span class="hljs-string">$&quot;使用中: <span class="hljs-subst">&#123;InUseCount&#125;</span>\n&quot;</span>;<br>            info += <span class="hljs-string">$&quot;排队中: <span class="hljs-subst">&#123;_preloadQueue.Count&#125;</span>\n&quot;</span>;<br>            info += <span class="hljs-string">$&quot;预加载协程运行中: <span class="hljs-subst">&#123;_isPreloadCoroutineRunning&#125;</span>\n&quot;</span>;<br>            info += <span class="hljs-string">$&quot;清理协程运行中: <span class="hljs-subst">&#123;_isCleanupCoroutineRunning&#125;</span>\n\n&quot;</span>;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> kvp <span class="hljs-keyword">in</span> _preloadPools)<br>            &#123;<br>                <span class="hljs-keyword">var</span> available = GetAvailableCount(kvp.Key);<br>                <span class="hljs-keyword">var</span> total = kvp.Value.Count;<br>                info += <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;kvp.Key&#125;</span>: <span class="hljs-subst">&#123;available&#125;</span>/<span class="hljs-subst">&#123;total&#125;</span>\n&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> info;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取所有池的名称列表</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">GetAllPoolNames</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> _preloadPools.Keys.ToList();<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取指定池的详细信息</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> PreloadPoolDebugInfo <span class="hljs-title">GetPoolDebugInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> location</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_preloadPools.TryGetValue(location, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pool))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">var</span> poolInfo = <span class="hljs-keyword">new</span> PreloadPoolDebugInfo<br>            &#123;<br>                location = location,<br>                totalCount = pool.Count,<br>                availableCount = GetAvailableCount(location),<br>                inUseCount = pool.Count(item =&gt; item.isInUse),<br>                items = <span class="hljs-keyword">new</span> List&lt;PreloadItemDebugInfo&gt;()<br>            &#125;;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> pool)<br>            &#123;<br>                <span class="hljs-keyword">var</span> itemInfo = <span class="hljs-keyword">new</span> PreloadItemDebugInfo<br>                &#123;<br>                    isInUse = item.isInUse,<br>                    createTime = item.createTime,<br>                    lastUseTime = item.lastUseTime,<br>                    useCount = item.useCount,<br>                    gameObjectName = item.gameObject != <span class="hljs-literal">null</span> ? item.gameObject.name : <span class="hljs-string">&quot;null&quot;</span>,<br>                    isGameObjectNull = item.gameObject == <span class="hljs-literal">null</span><br>                &#125;;<br>                poolInfo.items.Add(itemInfo);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> poolInfo;<br>        &#125;<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个预加载系统通过以下特性实现了高效的资源管理：</p><ol><li><strong>低 GC 设计</strong>：对象池复用机制减少内存分配</li><li><strong>异步加载</strong>：UniTask 确保主线程流畅</li><li><strong>智能管理</strong>：按需启动协程，自动清理闲置对象</li><li><strong>灵活配置</strong>：支持优先级、数量限制等多种配置</li><li><strong>完整监控</strong>：提供详细的调试和监控信息</li></ol>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>优化</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClaudeCode配置MCP</title>
    <link href="/2025/06/17/Configuring_ClaudeCode_MCP/"/>
    <url>/2025/06/17/Configuring_ClaudeCode_MCP/</url>
    
    <content type="html"><![CDATA[<h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><h3 id="方法一：使用命令行（推荐）"><a href="#方法一：使用命令行（推荐）" class="headerlink" title="方法一：使用命令行（推荐）"></a>方法一：使用命令行（推荐）</h3><p>Claude 提供了专门的命令行工具来管理 MCP 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看帮助</span><br>claude mcp --<span class="hljs-built_in">help</span><br><br><span class="hljs-comment"># 列出所有配置的服务器</span><br>claude mcp list<br><br><span class="hljs-comment"># 获取特定服务器详情</span><br>claude mcp get &lt;server-name&gt;<br></code></pre></td></tr></table></figure><h3 id="方法二：使用-add-json-命令添加服务器"><a href="#方法二：使用-add-json-命令添加服务器" class="headerlink" title="方法二：使用 add-json 命令添加服务器"></a>方法二：使用 add-json 命令添加服务器</h3><p>推荐使用 <code>add-json</code> 命令，因为它可以一次性设置所有配置项：</p><h4 id="1-Memory-MCP-Server（内存管理）"><a href="#1-Memory-MCP-Server（内存管理）" class="headerlink" title="1. Memory MCP Server（内存管理）"></a>1. Memory MCP Server（内存管理）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">claude mcp add-json memory-mcp <span class="hljs-string">&#x27;&#123;&quot;command&quot;:&quot;cmd&quot;,&quot;args&quot;:[&quot;/c&quot;,&quot;npx&quot;,&quot;-y&quot;,&quot;@modelcontextprotocol/server-memory&quot;],&quot;env&quot;:&#123;&quot;MEMORY_FILE_PATH&quot;:&quot;D:/UnityGame/Self/2048/UnityProject/Assets/Memory.json&quot;&#125;,&quot;disabled&quot;:false,&quot;alwaysAllow&quot;:[&quot;create_entities&quot;,&quot;create_relations&quot;,&quot;add_observations&quot;,&quot;delete_entities&quot;,&quot;delete_observations&quot;,&quot;delete_relations&quot;,&quot;read_graph&quot;,&quot;search_nodes&quot;,&quot;open_nodes&quot;,&quot;get_memory&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>功能</strong>：提供知识图谱和内存管理功能，可以创建实体、关系和观察记录。</p><h4 id="2-Repomix-Server（代码仓库分析）"><a href="#2-Repomix-Server（代码仓库分析）" class="headerlink" title="2. Repomix Server（代码仓库分析）"></a>2. Repomix Server（代码仓库分析）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">claude mcp add-json repomix <span class="hljs-string">&#x27;&#123;&quot;command&quot;:&quot;cmd&quot;,&quot;args&quot;:[&quot;/c&quot;,&quot;npx&quot;,&quot;-y&quot;,&quot;repomix&quot;,&quot;--mcp&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>功能</strong>：分析和打包代码仓库，生成项目结构报告。</p><h4 id="3-Tavily-MCP-Server（网络搜索）"><a href="#3-Tavily-MCP-Server（网络搜索）" class="headerlink" title="3. Tavily MCP Server（网络搜索）"></a>3. Tavily MCP Server（网络搜索）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">claude mcp add-json tavily-mcp <span class="hljs-string">&#x27;&#123;&quot;command&quot;:&quot;cmd&quot;,&quot;args&quot;:[&quot;/c&quot;,&quot;npx&quot;,&quot;-y&quot;,&quot;tavily-mcp@0.1.4&quot;],&quot;env&quot;:&#123;&quot;TAVILY_API_KEY&quot;:&quot;你的API密钥&quot;&#125;,&quot;alwaysAllow&quot;:[&quot;tavily-search&quot;,&quot;tavily-extract&quot;],&quot;disabled&quot;:false&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>功能</strong>：提供实时网络搜索和内容提取功能。</p><p><strong>注意</strong>：需要从 <a href="https://tavily.com/">Tavily</a> 获取 API 密钥。</p><h4 id="4-GitHub-MCP-Server（GitHub-操作）"><a href="#4-GitHub-MCP-Server（GitHub-操作）" class="headerlink" title="4. GitHub MCP Server（GitHub 操作）"></a>4. GitHub MCP Server（GitHub 操作）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">claude mcp add-json github-mcp <span class="hljs-string">&#x27;&#123;&quot;command&quot;:&quot;cmd&quot;,&quot;args&quot;:[&quot;/c&quot;,&quot;npx&quot;,&quot;-y&quot;,&quot;@modelcontextprotocol/server-github&quot;],&quot;env&quot;:&#123;&quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;:&quot;你的GitHub令牌&quot;&#125;,&quot;alwaysAllow&quot;:[&quot;create_or_update_file&quot;,&quot;search_repositories&quot;,&quot;create_repository&quot;,&quot;get_file_contents&quot;,&quot;push_files&quot;,&quot;create_pull_request&quot;,&quot;fork_repository&quot;,&quot;create_branch&quot;,&quot;list_issues&quot;,&quot;add_issue_comment&quot;,&quot;search_code&quot;,&quot;search_users&quot;,&quot;get_pull_request&quot;,&quot;get_issue&quot;,&quot;list_pull_requests&quot;,&quot;create_pull_request_review&quot;,&quot;merge_pull_request&quot;,&quot;get_pull_request_files&quot;,&quot;get_pull_request_status&quot;,&quot;update_pull_request_branch&quot;,&quot;get_pull_request_reviews&quot;,&quot;get_pull_request_comments&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>功能</strong>：直接操作 GitHub 仓库，创建 PR、管理 Issues 等。</p><p><strong>注意</strong>：需要在 GitHub 设置中生成 Personal Access Token。</p><h4 id="5-Context7-Server（文档查询）"><a href="#5-Context7-Server（文档查询）" class="headerlink" title="5. Context7 Server（文档查询）"></a>5. Context7 Server（文档查询）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">claude mcp add-json context7 <span class="hljs-string">&#x27;&#123;&quot;command&quot;:&quot;npx&quot;,&quot;args&quot;:[&quot;-y&quot;,&quot;@upstash/context7-mcp&quot;],&quot;env&quot;:&#123;&quot;DEFAULT_MINIMUM_TOKENS&quot;:&quot;&quot;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>功能</strong>：获取最新的开发库文档和代码示例。</p><h3 id="方法三：简单添加命令"><a href="#方法三：简单添加命令" class="headerlink" title="方法三：简单添加命令"></a>方法三：简单添加命令</h3><p>如果不需要复杂配置，可以使用简单的 add 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Memory MCP</span><br>claude mcp add memory-mcp <span class="hljs-string">&quot;cmd&quot;</span> <span class="hljs-string">&quot;/c&quot;</span> <span class="hljs-string">&quot;npx&quot;</span> <span class="hljs-string">&quot;-y&quot;</span> <span class="hljs-string">&quot;@modelcontextprotocol/server-memory&quot;</span><br><br><span class="hljs-comment"># Repomix</span><br>claude mcp add repomix <span class="hljs-string">&quot;cmd&quot;</span> <span class="hljs-string">&quot;/c&quot;</span> <span class="hljs-string">&quot;npx&quot;</span> <span class="hljs-string">&quot;-y&quot;</span> <span class="hljs-string">&quot;repomix&quot;</span> <span class="hljs-string">&quot;--mcp&quot;</span><br><br><span class="hljs-comment"># Tavily MCP</span><br>claude mcp add tavily-mcp <span class="hljs-string">&quot;cmd&quot;</span> <span class="hljs-string">&quot;/c&quot;</span> <span class="hljs-string">&quot;npx&quot;</span> <span class="hljs-string">&quot;-y&quot;</span> <span class="hljs-string">&quot;tavily-mcp@0.1.4&quot;</span><br><br><span class="hljs-comment"># GitHub MCP</span><br>claude mcp add github-mcp <span class="hljs-string">&quot;cmd&quot;</span> <span class="hljs-string">&quot;/c&quot;</span> <span class="hljs-string">&quot;npx&quot;</span> <span class="hljs-string">&quot;-y&quot;</span> <span class="hljs-string">&quot;@modelcontextprotocol/server-github&quot;</span><br><br><span class="hljs-comment"># Context7</span><br>claude mcp add context7 <span class="hljs-string">&quot;npx&quot;</span> <span class="hljs-string">&quot;-y&quot;</span> <span class="hljs-string">&quot;@upstash/context7-mcp&quot;</span><br></code></pre></td></tr></table></figure><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>某些 MCP 服务器需要设置环境变量：</p><h3 id="必需的-API-密钥"><a href="#必需的-API-密钥" class="headerlink" title="必需的 API 密钥"></a>必需的 API 密钥</h3><ul><li><strong>TAVILY_API_KEY</strong>: Tavily 搜索服务的 API 密钥</li><li><strong>GITHUB_PERSONAL_ACCESS_TOKEN</strong>: GitHub 个人访问令牌</li></ul><h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><ul><li><strong>MEMORY_FILE_PATH</strong>: Memory MCP 的数据存储路径</li><li><strong>DEFAULT_MINIMUM_TOKENS</strong>: Context7 的最小令牌数</li></ul><h2 id="管理-MCP-服务器"><a href="#管理-MCP-服务器" class="headerlink" title="管理 MCP 服务器"></a>管理 MCP 服务器</h2><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有服务器</span><br>claude mcp list<br><br><span class="hljs-comment"># 查看特定服务器详情</span><br>claude mcp get memory-mcp<br></code></pre></td></tr></table></figure><h3 id="删除服务器"><a href="#删除服务器" class="headerlink" title="删除服务器"></a>删除服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除指定服务器</span><br>claude mcp remove memory-mcp<br></code></pre></td></tr></table></figure><h3 id="重置项目配置"><a href="#重置项目配置" class="headerlink" title="重置项目配置"></a>重置项目配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重置项目范围内的服务器选择</span><br>claude mcp reset-project-choices<br></code></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-命令执行失败"><a href="#1-命令执行失败" class="headerlink" title="1. 命令执行失败"></a>1. 命令执行失败</h3><ul><li>确保 Node.js 和 npm 已正确安装</li><li>检查网络连接是否正常</li><li>验证 API 密钥是否有效</li></ul><h3 id="2-服务器无法启动"><a href="#2-服务器无法启动" class="headerlink" title="2. 服务器无法启动"></a>2. 服务器无法启动</h3><ul><li>检查环境变量是否正确设置</li><li>确认 MCP 服务器包是否成功安装</li><li>查看错误日志排查具体问题</li></ul><h3 id="3-权限问题"><a href="#3-权限问题" class="headerlink" title="3. 权限问题"></a>3. 权限问题</h3><ul><li>确保 GitHub 令牌有足够的权限</li><li>检查文件路径的读写权限</li></ul>]]></content>
    
    
    <categories>
      
      <category>AI Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ClaudeCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl中配置clash代理</title>
    <link href="/2025/06/17/Configuring_Clash_Proxy_in_WSL/"/>
    <url>/2025/06/17/Configuring_Clash_Proxy_in_WSL/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近在本地部署 Claude Code，因为要下载需要代理，所以本教程详细介绍如何在 WSL (Windows Subsystem for Linux) 中配置 Clash for Windows 代理，实现 WSL 环境下的网络代理访问。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>已安装 WSL</li><li>已安装并运行 Clash for Windows</li><li>Clash for Windows 使用默认端口 7890</li></ul><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="第一步：确认-Clash-for-Windows-设置"><a href="#第一步：确认-Clash-for-Windows-设置" class="headerlink" title="第一步：确认 Clash for Windows 设置"></a>第一步：确认 Clash for Windows 设置</h3><ol><li><strong>打开 Clash for Windows</strong></li><li><strong>在 General 标签页中</strong>：<ul><li>确保 <strong>Allow LAN</strong> 选项已开启（这是关键步骤！）</li><li>确认 <strong>HTTP Port</strong> 为 7890</li><li>确认 <strong>Socks Port</strong> 为 7891</li></ul></li></ol><h3 id="第二步：获取-Windows-主机-IP-地址"><a href="#第二步：获取-Windows-主机-IP-地址" class="headerlink" title="第二步：获取 Windows 主机 IP 地址"></a>第二步：获取 Windows 主机 IP 地址</h3><p>在 WSL 终端中执行以下命令获取 Windows 主机 IP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法一：通过 resolv.conf 获取</span><br><span class="hljs-built_in">cat</span> /etc/resolv.conf | grep nameserver | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><br><span class="hljs-comment"># 方法二：通过路由表获取（推荐）</span><br>ip route show | grep default | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：通常方法二得到的 IP 地址更准确，如本例中得到的 <code>172.28.176.1</code>。</p><h3 id="第三步：设置临时代理环境变量"><a href="#第三步：设置临时代理环境变量" class="headerlink" title="第三步：设置临时代理环境变量"></a>第三步：设置临时代理环境变量</h3><p>使用获得的 IP 地址设置代理（以 <code>172.28.176.1</code> 为例）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除之前的代理设置</span><br><span class="hljs-built_in">unset</span> http_proxy<br><span class="hljs-built_in">unset</span> https_proxy<br><span class="hljs-built_in">unset</span> all_proxy<br><br><span class="hljs-comment"># 设置新的代理</span><br><span class="hljs-built_in">export</span> http_proxy=http://172.28.176.1:7890<br><span class="hljs-built_in">export</span> https_proxy=http://172.28.176.1:7890<br><span class="hljs-built_in">export</span> all_proxy=socks5://172.28.176.1:7891<br></code></pre></td></tr></table></figure><h3 id="第四步：测试代理连接"><a href="#第四步：测试代理连接" class="headerlink" title="第四步：测试代理连接"></a>第四步：测试代理连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试代理是否工作</span><br>curl -I https://www.google.com<br></code></pre></td></tr></table></figure><p><strong>成功的响应示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">HTTP/1.1 200 Connection established<br>HTTP/2 200<br>content-type: text/html; charset=ISO-8859-1<br>...<br></code></pre></td></tr></table></figure><h3 id="第五步：配置永久代理设置"><a href="#第五步：配置永久代理设置" class="headerlink" title="第五步：配置永久代理设置"></a>第五步：配置永久代理设置</h3><h4 id="1-创建代理设置脚本"><a href="#1-创建代理设置脚本" class="headerlink" title="1. 创建代理设置脚本"></a>1. 创建代理设置脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建代理配置脚本</span><br><span class="hljs-built_in">cat</span> &gt; ~/.proxy_setup.sh &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># WSL Clash 代理配置脚本</span><br><br><span class="hljs-comment"># 获取 Windows 主机 IP</span><br>WINDOWS_IP=$(ip route show | grep default | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>)<br><br><span class="hljs-comment"># 设置代理环境变量</span><br><span class="hljs-built_in">export</span> http_proxy=http://<span class="hljs-variable">$WINDOWS_IP</span>:7890<br><span class="hljs-built_in">export</span> https_proxy=http://<span class="hljs-variable">$WINDOWS_IP</span>:7890<br><span class="hljs-built_in">export</span> all_proxy=socks5://<span class="hljs-variable">$WINDOWS_IP</span>:7891<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;代理已设置: <span class="hljs-variable">$WINDOWS_IP</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP/HTTPS 代理端口: 7890&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SOCKS5 代理端口: 7891&quot;</span><br>EOF<br><br><span class="hljs-comment"># 赋予执行权限</span><br><span class="hljs-built_in">chmod</span> +x ~/.proxy_setup.sh<br></code></pre></td></tr></table></figure><h4 id="2-将代理设置添加到-shell-配置文件"><a href="#2-将代理设置添加到-shell-配置文件" class="headerlink" title="2. 将代理设置添加到 shell 配置文件"></a>2. 将代理设置添加到 shell 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加到 .bashrc 文件末尾</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;# WSL Clash 代理设置&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/.proxy_setup.sh&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h4 id="3-创建快捷命令"><a href="#3-创建快捷命令" class="headerlink" title="3. 创建快捷命令"></a>3. 创建快捷命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建启用/禁用代理的快捷命令</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;alias proxy-on=&quot;source ~/.proxy_setup.sh&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;alias proxy-off=&quot;unset http_proxy https_proxy all_proxy &amp;&amp; echo \&quot;代理已关闭\&quot;&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;alias proxy-status=&quot;echo \&quot;HTTP代理: \$http_proxy\&quot; &amp;&amp; echo \&quot;HTTPS代理: \$https_proxy\&quot; &amp;&amp; echo \&quot;SOCKS代理: \$all_proxy\&quot;&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h4 id="4-重新加载配置"><a href="#4-重新加载配置" class="headerlink" title="4. 重新加载配置"></a>4. 重新加载配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h2><p>代理配置成功后，可以正常安装 npm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新包列表</span><br><span class="hljs-built_in">sudo</span> apt update<br><br><span class="hljs-comment"># 安装 Node.js 和 npm</span><br><span class="hljs-built_in">sudo</span> apt install -y nodejs npm<br><br><span class="hljs-comment"># 验证安装</span><br>node --version<br>npm --version<br></code></pre></td></tr></table></figure><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><p>配置完成后，您可以使用以下命令管理代理：</p><ul><li><code>proxy-on</code> - 启用代理</li><li><code>proxy-off</code> - 关闭代理</li><li><code>proxy-status</code> - 查看当前代理状态</li></ul><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h3 id="常见问题及解决方案"><a href="#常见问题及解决方案" class="headerlink" title="常见问题及解决方案"></a>常见问题及解决方案</h3><ol><li><p><strong>连接被拒绝 (Connection refused)</strong></p><ul><li>检查 Clash for Windows 是否正在运行</li><li>确认 Allow LAN 选项已开启</li><li>验证端口号是否正确</li></ul></li><li><p><strong>IP 地址问题</strong></p><ul><li>尝试使用不同的方法获取 Windows 主机 IP</li><li>有时 <code>/etc/resolv.conf</code> 中的 IP 可能不准确</li></ul></li><li><p><strong>权限问题</strong></p><ul><li>确保有足够权限执行 sudo 命令</li><li>检查脚本文件的执行权限</li></ul></li><li><p><strong>防火墙问题</strong></p><ul><li>Windows 防火墙可能阻止 WSL 访问 Windows 上的端口</li><li>考虑在 Windows 防火墙中添加例外规则</li></ul></li></ol><h2 id="配置验证"><a href="#配置验证" class="headerlink" title="配置验证"></a>配置验证</h2><p>成功配置后，应该能够：</p><ol><li>✅ 访问 Google 等被墙网站</li><li>✅ 正常使用 npm install</li><li>✅ 使用 git clone 从 GitHub 克隆仓库</li><li>✅ 使用 wget&#x2F;curl 下载文件</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>每次重启 WSL 后代理会重新自动配置</strong>（如果按照永久配置步骤设置）</li><li><strong>Clash for Windows 必须保持运行状态</strong></li><li><strong>Allow LAN 选项是关键设置</strong>，必须开启</li></ol><hr><p><strong>适用环境</strong>: Windows 11 + WSL + Clash for Windows<br><strong>测试状态</strong>: ✅ 已验证可用</p>]]></content>
    
    
    <categories>
      
      <category>AI Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软技能-代码之外的生存指南_其三</title>
    <link href="/2025/05/25/Soft_Skills_Beyond_Code_Chapter_3/"/>
    <url>/2025/05/25/Soft_Skills_Beyond_Code_Chapter_3/</url>
    
    <content type="html"><![CDATA[<h2 id="学会如何与人打交道"><a href="#学会如何与人打交道" class="headerlink" title="学会如何与人打交道"></a>学会如何与人打交道</h2><p><strong>作为一名软件开发者，你的工作就是与人打交道</strong></p><h3 id="每个人都希望自己很重要"><a href="#每个人都希望自己很重要" class="headerlink" title="每个人都希望自己很重要"></a>每个人都希望自己很重要</h3><p>每个人都希望自己很重要，一旦你贬低他人，削弱他们的成就感，在某种程度上就如同切断了他们的氧气补给，获得的回馈就是愤怒和敌意。</p><p>我们常常容易犯的一项错误就是，轻率地否决同事的想法，以便于可以提出自己的想法。</p><h3 id="永远不要批评"><a href="#永远不要批评" class="headerlink" title="永远不要批评"></a>永远不要批评</h3><p>奖励积极行为要比惩罚消极行为有效得多。</p><h3 id="换位思考"><a href="#换位思考" class="headerlink" title="换位思考"></a>换位思考</h3><p>停止用 &lt;我&gt; 和 &lt;我想要什么&gt; 来思考。你因该思考对他人而言什么才最重要，什么才是他们需要的。</p><h3 id="避免争论"><a href="#避免争论" class="headerlink" title="避免争论"></a>避免争论</h3><p>尽管我们自己为自己的智慧感到骄傲，但我们依然是情感动物。</p><p>如果你因为该做某事与其他人产生分歧，那么在很多情况下，你最好先确定分歧点是否值得你去拼命维护，特别是你知道他已经让他人卷入时。</p><p>你会发现，当你学会了如何避免争论时，自己的生活会变得轻松很多。</p><h3 id="模式控制"><a href="#模式控制" class="headerlink" title="模式控制"></a>模式控制</h3><p>每当你与另外一个人对话时，你的模式和他的模式发生激烈的交锋，其中一人会胜出。</p><p>所谓你的模式就是你如何看待世界，你相信什么是事实；所谓他的模式就是他们对现实世界的感知</p><p>大多数情况下，不同人的模式是相互冲突的，其中有一种模式，即主导模式，决定了对话的主旋律</p><p>在与人打交道时，要认识到模式是存在的，如果你能够时时刻刻把主导模式抓在自己手中，那你就可以说服人们相信你对现实的感知</p><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mermaid"><br>graph LR<br>    A[每个人都希望自己很重要] --&gt; B[永远不要批评]<br>    B --&gt; I[奖励积极行为要比惩罚消极行为有效得多]<br><br>    A --&gt; C[换位思考]<br>    C --&gt; J[停止用 &lt;我&gt; 和 &lt;我想要什么&gt; 来思考]<br>    C --&gt; K[你因该思考对他人而言什么才最重要，什么才是他们需要的。]<br>    A --&gt; D[避免争论]<br>    D --&gt; L[尽管我们自己为自己的智慧感到骄傲，但我们依然是情感动物。]<br>    D --&gt; M[如果你因为该做某事与其他人产生分歧，那么在很多情况下，你最好先确定分歧点是否值得你去拼命维护，特别是你知道他已经让他人卷入时。]<br>    D --&gt; N[你会发现，当你学会了如何避免争论时，自己的生活会变得轻松很多。]<br><br>    A --&gt; E[模式控制]<br>    E --&gt; O[每当你与另外一个人对话时，你的模式和他的模式发生激烈的交锋，其中一人会胜出。]<br>    E --&gt; P[所谓你的模式就是你如何看待世界，你相信什么是事实；所谓他的模式就是他们对现实世界的感知]<br>    E --&gt; Q[大多数情况下，不同人的模式是相互冲突的，其中有一种模式，即主导模式，决定了对话的主旋律]<br><br><br>    A --&gt; F[每个人都希望自己很重要]<br>    F --&gt; G[我们常常容易犯的一项错误就是，轻率地否决同事的想法]<br>    F --&gt; H[每个人都希望自己很重要，一旦你贬低他人，削弱他们的成就感，在某种程度上就如同切断了他们的氧气补给，获得的回馈就是愤怒和敌意。]<br><br><br><br><br>```<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软技能代码之外的生存指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GameFramework生命周期</title>
    <link href="/2025/05/24/GameFramework_Lifecycle/"/>
    <url>/2025/05/24/GameFramework_Lifecycle/</url>
    
    <content type="html"><![CDATA[<p>最近又在写一些游戏项目，想要看一些有什么方便开发的框架，来来回回发现 GameFramework 依然是绕不过去的一个框架。本章主要是分析一下 GameFramework 的生命周期。</p><h2 id="Unity-生命周期"><a href="#Unity-生命周期" class="headerlink" title="Unity 生命周期"></a>Unity 生命周期</h2><p>先看一下常见的 Unity 的生命周期</p><pre><code class="mermaid">graph LR    A[Awake] --> B[Start]    B --> C[Update]    C --> C    C --> D[OnDestroy]    E[其他MonoBehaviour] --> F[独立生命周期]</code></pre><p>主要有几个问题：</p><ul><li>各个模块之间的生命周期是独立的，执行顺序不确定</li><li>难以控制正确的初始化和销毁顺序</li><li>无法更好的处理依赖关系</li></ul><h2 id="GameFramework-生命周期"><a href="#GameFramework-生命周期" class="headerlink" title="GameFramework 生命周期"></a>GameFramework 生命周期</h2><h3 id="GameFrameworkModule"><a href="#GameFrameworkModule" class="headerlink" title="GameFrameworkModule"></a>GameFrameworkModule</h3><p>GameFramework 通过 GameFrameworkModule 来管理模块的生命周期。GameFrameworkModule 是一个抽象类，主要有三个方法：</p><pre><code class="mermaid">graph TB    A[GameFrameworkEntry.GetModule] --> B[自动创建模块]    B --> C[按优先级排序]    C --> D[统一Update循环]    D --> E[逆序Shutdown]    F[高优先级模块] --> G[先执行Update]    F --> H[后执行Shutdown]</code></pre><p>代码是这样的：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 游戏框架模块抽象类。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameFrameworkModule</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取游戏框架模块优先级。</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;remarks&gt;</span>优先级较高的模块会优先轮询，并且关闭操作会后进行。<span class="hljs-doctag">&lt;/remarks&gt;</span></span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> Priority<br>    &#123;<br>        <span class="hljs-keyword">get</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 游戏框架模块轮询。</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> elapseSeconds, <span class="hljs-built_in">float</span> realElapseSeconds</span>)</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 关闭并清理游戏框架模块。</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Shutdown</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>通过 Priority 来控制模块的执行顺序</li><li>通过 Update 来控制模块的更新</li><li>通过 Shutdown 来控制模块的销毁</li></ol><h3 id="GameFrameworkEntry"><a href="#GameFrameworkEntry" class="headerlink" title="GameFrameworkEntry"></a>GameFrameworkEntry</h3><p>看了 GameFrameworkModule 的实现，接下来看看 GameFrameworkEntry 的实现。GameFrameworkEntry 中是如何管理项目中所有的模块的。</p><h4 id="1-CreateModule"><a href="#1-CreateModule" class="headerlink" title="1. CreateModule"></a>1. CreateModule</h4><ol><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.activator.createinstance?view=net-8.0">System.Activator.CreateInstance</a> 来创建模块</li><li>通过 LinkedList 来管理模块的顺序,保证在数据结构中模块是有序的</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 创建游戏框架模块。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;moduleType&quot;&gt;</span>要创建的游戏框架模块类型。<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>要创建的游戏框架模块。<span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> GameFrameworkModule <span class="hljs-title">CreateModule</span>(<span class="hljs-params">Type moduleType</span>)</span><br>&#123;<br>    GameFrameworkModule module = (GameFrameworkModule)Activator.CreateInstance(moduleType);<br>    <span class="hljs-keyword">if</span> (module == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="hljs-string">&quot;Can not create module &#x27;&#123;0&#125;&#x27;.&quot;</span>, moduleType.FullName));<br>    &#125;<br><br>    <span class="hljs-comment">// 根据优先级插入,高优先级在前</span><br>    LinkedListNode&lt;GameFrameworkModule&gt; current = s_GameFrameworkModules.First;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (module.Priority &gt; current.Value.Priority)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        current = current.Next;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (current != <span class="hljs-literal">null</span>)<br>    &#123;<br>        s_GameFrameworkModules.AddBefore(current, module);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        s_GameFrameworkModules.AddLast(module);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> module;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-GetModule"><a href="#2-GetModule" class="headerlink" title="2. GetModule"></a>2. GetModule</h4><ol><li>强制使用接口来获取模块，依赖倒置原则:<ul><li>高层模块不应该依赖低层模块，二者都应该依赖抽象</li><li>通过接口来获取模块，避免了直接依赖实现类</li></ul></li><li>通过命名约定来获取模块<ul><li>IXxxManager -&gt; XxxManager</li><li>通过反射来获取模块的类型</li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 获取游戏框架模块。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>要获取的游戏框架模块类型。<span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>要获取的游戏框架模块。<span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;remarks&gt;</span>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。<span class="hljs-doctag">&lt;/remarks&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">GetModule</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>&#123;<br>    Type interfaceType = <span class="hljs-keyword">typeof</span>(T);<br>    <span class="hljs-comment">// 1. 必须是接口类型</span><br>    <span class="hljs-keyword">if</span> (!interfaceType.IsInterface)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="hljs-string">&quot;You must get module by interface, but &#x27;&#123;0&#125;&#x27; is not.&quot;</span>, interfaceType.FullName));<br>    &#125;<br>    <span class="hljs-comment">// 2. 必须是游戏框架模块, 必须是 GameFramework 命名空间下的类型</span><br>    <span class="hljs-keyword">if</span> (!interfaceType.FullName.StartsWith(<span class="hljs-string">&quot;GameFramework.&quot;</span>, StringComparison.Ordinal))<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="hljs-string">&quot;You must get a Game Framework module, but &#x27;&#123;0&#125;&#x27; is not.&quot;</span>, interfaceType.FullName));<br>    &#125;<br>    <span class="hljs-comment">// 3. 命名约定：IXxxManager -&gt; XxxManager</span><br>    <span class="hljs-built_in">string</span> moduleName = Utility.Text.Format(<span class="hljs-string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>,<br>        interfaceType.Namespace,<br>        interfaceType.Name.Substring(<span class="hljs-number">1</span>));   <span class="hljs-comment">// 去掉前缀 I</span><br>    Type moduleType = Type.GetType(moduleName);<br>    <span class="hljs-keyword">if</span> (moduleType == <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="hljs-string">&quot;Can not find Game Framework module type &#x27;&#123;0&#125;&#x27;.&quot;</span>, moduleName));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> GetModule(moduleType) <span class="hljs-keyword">as</span> T;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 获取游戏框架模块。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;moduleType&quot;&gt;</span>要获取的游戏框架模块类型。<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span>要获取的游戏框架模块。<span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;remarks&gt;</span>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。<span class="hljs-doctag">&lt;/remarks&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> GameFrameworkModule <span class="hljs-title">GetModule</span>(<span class="hljs-params">Type moduleType</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (GameFrameworkModule module <span class="hljs-keyword">in</span> s_GameFrameworkModules)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (module.GetType() == moduleType)<br>        &#123;<br>            <span class="hljs-keyword">return</span> module;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> CreateModule(moduleType);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Update-Shutdown"><a href="#3-Update-Shutdown" class="headerlink" title="3. Update&#x2F;Shutdown"></a>3. Update&#x2F;Shutdown</h4><p>这部分就没什么特别需要注意的地方了，唯一需要注意的是在 Shutdown 的时候是逆序的(优先级低的模块可能用到了高优先级的模块)。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 所有游戏框架模块轮询。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> elapseSeconds, <span class="hljs-built_in">float</span> realElapseSeconds</span>)</span><br>&#123;<br>    <span class="hljs-keyword">foreach</span> (GameFrameworkModule module <span class="hljs-keyword">in</span> s_GameFrameworkModules)<br>    &#123;<br>        module.Update(elapseSeconds, realElapseSeconds);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 关闭并清理所有游戏框架模块。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Shutdown</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (LinkedListNode&lt;GameFrameworkModule&gt; current = s_GameFrameworkModules.Last; current != <span class="hljs-literal">null</span>; current = current.Previous)<br>    &#123;<br>        current.Value.Shutdown();<br>    &#125;<br><br>    s_GameFrameworkModules.Clear();<br>    ReferencePool.ClearAll();<br>    Utility.Marshal.FreeCachedHGlobal();<br>    GameFrameworkLog.SetLogHelper(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="用到的设计模式"><a href="#用到的设计模式" class="headerlink" title="用到的设计模式"></a>用到的设计模式</h4><ul><li>工厂模式、单例模式</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// GameFrameworkEntry 充当了工厂和单例管理器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameFrameworkEntry</span><br>&#123;<br>    <span class="hljs-comment">// 单例容器</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-title">GameFrameworkLinkedList</span>&lt;<span class="hljs-title">GameFrameworkModule</span>&gt; s_GameFrameworkModules</span>;<br><br>    <span class="hljs-comment">// 工厂方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">GetModule</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : <span class="hljs-keyword">class</span></span><br>    &#123;<br>        <span class="hljs-comment">// 1. 检查是否已存在</span><br>        GameFrameworkModule existingModule = GetModule(moduleType);<br>        <span class="hljs-keyword">if</span> (existingModule != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> existingModule <span class="hljs-keyword">as</span> T;<br><br>        <span class="hljs-comment">// 2. 不存在则创建新实例</span><br>        <span class="hljs-keyword">return</span> CreateModule(moduleType) <span class="hljs-keyword">as</span> T;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工厂模式:</p><pre><code class="mermaid">graph TBA[Client 客户端] --> B[Factory 工厂类]B --> C{产品类型判断}C -->|TypeA| D[ProductA 产品 A]C -->|TypeB| E[ProductB 产品 B]C -->|TypeC| F[ProductC 产品 C]    D --> G[IProduct产品接口]    E --> G    F --> G    G --> H[返回给客户端]</code></pre><p>单例模式:</p><pre><code class="mermaid">graph TBA[Client 客户端] --> B[Singleton 单例类]B --> C{判断是否已存在}C -->|已存在| D[返回实例]C -->|不存在| E[创建新实例]    E --> F[返回实例]</code></pre><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>使用了 LinkedList 来管理模块的顺序，LinkedList 是一个双向链表，支持在 O(1) 的时间复杂度内插入和删除节点。适合频繁插入和删除的场景。</p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GameFramework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软技能-代码之外的生存指南-其二</title>
    <link href="/2025/05/18/Soft_Skills_Beyond_Code_Chapter_2/"/>
    <url>/2025/05/18/Soft_Skills_Beyond_Code_Chapter_2/</url>
    
    <content type="html"><![CDATA[<h2 id="像经营企业一样，经营自己的职业生涯"><a href="#像经营企业一样，经营自己的职业生涯" class="headerlink" title="像经营企业一样，经营自己的职业生涯"></a>像经营企业一样，经营自己的职业生涯</h2><h3 id="拥有商业心态"><a href="#拥有商业心态" class="headerlink" title="拥有商业心态"></a>拥有商业心态</h3><ol><li>大多数软件开发人员并不能把自己的软件开发事业当作一桩生意来看待</li><li>为了谋生的写代码和开一个小铺子的老板，没有本质差别，都是将自己的服务推销出去</li><li>我们为公司工作，但是技能和生意都还是自己的，我们随时可以换个地方</li><li>开始把自己当作一家企业去思考，把雇主当作一个客户，从弱势地位转换为自我治理和自我引导的主动地位</li><li><strong>这是你职业职业生涯中必须要做的第一要务：转变你的心态，从被一纸“卖身契”束缚住的仆人，转变为一个拥有自己生意的商人，将此铭记于心，并积极主动地挂农历自己的职业生涯</strong></li></ol><h3 id="将思维模式切换为”经营企业”"><a href="#将思维模式切换为”经营企业”" class="headerlink" title="将思维模式切换为”经营企业”"></a>将思维模式切换为”经营企业”</h3><p>如何经营企业</p><ol><li>我们能提供什么？<br>软件开发人员售卖的就是，把一个想法变成数字化现实产品的能力</li><li>我能提供的服务和其他人有什么不同？</li><li>推广，仅有服务或者产品是不够的。想赚到钱，你就必须让潜在客户了解该产品或服务。</li><li>如何规划？<ul><li>专注于你正在提供怎样的服务，以及如何营销这项服务</li><li>想方设法提升你的服务</li><li>思考你可以专注为哪一类特定类型的客户或者行业提供特定的服务</li><li>集中精力成为一名转转，专门为某一种特定类型的客户提供专业的整体服务。</li><li><strong>只有真正专注于一类客户，才能找到顶尖的岗位</strong></li></ul></li></ol><h2 id="如何设定职业目标"><a href="#如何设定职业目标" class="headerlink" title="如何设定职业目标"></a>如何设定职业目标</h2><p>想象一下你登上了一艘即将横渡大海的船只。你会像大多数人那样，一跳上船就升起风帆。但是，如果没有选定明确的目的地，你就无法掌舵让这艘船朝着目标方向航行，而只能在大海上漫无目的地漂流。或许你的船能偶然到达某个小岛或者某片陆地，但是，如果没有确定自己的目的地，你永远都不会取得实质性的进展。一旦明确了目的地，你就会向着目标全力以赴。</p><h3 id="如何设定目标"><a href="#如何设定目标" class="headerlink" title="如何设定目标"></a>如何设定目标</h3><ol><li>设定大目标<ul><li>不需要特别的准确, 只需要有一个具体清晰的方向即可</li><li>必须足够清晰，能知道自己距离它越来越近，还是越来越远</li><li>勇于做梦，想象成功的样子</li></ul></li><li>设定小目标<ul><li>一个庞大的目标会让人感到无从下手</li><li>你可以沿着小目标驱动自己前行</li><li>年度目标 -&gt; 月度目标 &gt; 周目标 &gt; 日目标</li><li>较小的目标可以让你知道自己在朝着目标前进</li></ul></li><li><strong>追踪你的目标</strong><ul><li>定期更新自己设定的目标</li><li>维护自己的目标</li><li>追踪目标的进展</li></ul></li></ol><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><ul><li>像经营企业一样，经营自己的职业生涯</li></ul><pre><code class="mermaid">graph LR   A[经营企业一样，经营自己的职业生涯] --> B[拥有商业心态]   A --> C[将思维模式切换为,<经营企业>]   B --> D[大多数软件开发者不能把自己的软件开发事业当作一桩生意来看待]      B --> E[为了谋生的写代码和开一个小铺子的老板，没有本质差别，都是将自己的服务推销出去]      B --> F[我们为公司工作，但是技能和生意都还是自己的，我们随时可以换个地方]      B --> G[开始把自己当作一家企业去思考，把雇主当作一个客户，从弱势地位转换为自我治理和自我引导的主动地位]      B --> H[这是你职业职业生涯中必须要做的第一要务：转变你的心态，从被一纸“卖身契”束缚住的仆人，转变为一个拥有自己生意的商人，将此铭记于心，并积极主动地挂农历自己的职业生涯]      C --> I[我们能提供什么？]      I --> J[软件开发人员售卖的就是，把一个想法变成数字化现实产品的能力]      C --> K[我能提供的服务和其他人有什么不同？]      K --> L[作为一名软件开发者，你能提供的服务和其他人有什么不同？]      C --> M[仅有服务或者产品是不够的。想赚到钱，你就必须让潜在客户了解该产品或服务]      C --> N[如何规划？]      N --> O[专注于你正在提供怎样的服务，以及如何营销这项服务]      N --> P[想方设法提升你的服务]      N --> Q[思考你可以专注为哪一类特定类型的客户或者行业提供特定的服务]      N --> R[集中精力成为一名转转，专门为某一种特定类型的客户提供专业的整体服务,<只有真正专注于一类客户，才能找到顶尖的岗位>]      C --> S[如何宣传还要想想如何更好地宣传你的服务，如何更好地找到你的客户。大多数软件开发人员在写好一份简历之后就随意丢给一些公司和招聘人员。但是，当你把职业生涯当作一家企业时，你真的认为这就是你拓展潜在客户的最佳途径或唯一方法吗？当然不是。大多数成功的公司都会开发出让客户主动上门购买的产品或服不会一个接一个地追逐客。]</code></pre><h3 id="如何设定职业目标-1"><a href="#如何设定职业目标-1" class="headerlink" title="如何设定职业目标"></a>如何设定职业目标</h3><pre><code class="mermaid">graph LR   A[如何设定职业目标] --> B[如果没有确定自己的目的地，你就无法掌舵让这艘船朝着目标方向航行，而只能在大海上漫无目的地漂流。一旦明确了目的地，你就会向着目标全力以赴]   B --> C[设定大目标]   C --> D[不需要特别的准确, 只需要有一个具体清晰的方向即可]   C --> E[必须足够清晰，能知道自己距离它越来越近，还是越来越远]   C --> F[勇于做梦，想象成功的样子]   B --> G[设定小目标]   G --> H[一个庞大的目标会让人感到无从下手]   G --> I[你可以沿着小目标驱动自己前行]   G --> J[年度目标 -> 月度目标 > 周目标 > 日目标]   G --> K[较小的目标可以让你知道自己在朝着目标前进]   B --> L[追踪你的目标]   L --> M[定期更新自己设定的目标]   L --> N[维护自己的目标]   L --> O[追踪目标的进展]</code></pre>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软技能代码之外的生存指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity组件Canvas_CanvasScaler参数详解</title>
    <link href="/2025/05/13/Unity%20Component%20Canvas_CanvasScaler%20Parameter%20Explanation/"/>
    <url>/2025/05/13/Unity%20Component%20Canvas_CanvasScaler%20Parameter%20Explanation/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/book.png"></p><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>Render Mode: 画布中渲染模式</p><ul><li><p>Screen Space - Overlay: 这种渲染模式将 UI 元素放在最上级渲染，不需要相机也可以渲染<br><img src="/../images/Unity_Canvas/CanvasOverlay.png"></p></li><li><p>Screen Space - Camera: 这种渲染模式下，Canvas 会放置在指定的 UI 相机前。UI 元素由这个相机渲染。相机的设置会影响 UI 的外观<br><img src="/../images/Unity_Canvas/CanvasCamera.png"></p></li><li><p>World Space: 将 UI 视为平面渲染。其他对象可以位于 UI 后面、中间穿透、前面。画布大小取决于与相机视角和距离。例如显示在人物头顶的血条<br><img src="/../images/Unity_Canvas/CanvasWorldSpace.png"></p></li></ul><p>Pixel Perfect: 可以使元素看起来更清晰，防止模糊。但是，如果许多元素被缩放或旋转，或者使用微妙的动画位置或缩放，则禁用 pixelPerfect 可能更有利，因为运动将更平滑。<br>Render Camera: 渲染相机<br>Plane Distance: 平面距离<br>Resize Canvas: 调整画布大小<br>Sorting Layer: 排序层<br>Order in Layer: 层级顺序<br>Additional Shader Channels: 附加着色器通道<br>Vertex Color Always In Gamma Color Space: 顶点颜色始终在伽马颜色空间中</p><h2 id="CanvasScaler"><a href="#CanvasScaler" class="headerlink" title="CanvasScaler"></a>CanvasScaler</h2><p>UI Scale Mode:</p><ul><li><p>Constant Pixel Size: 无论屏幕大小 UI 元素都以相同的像素大小显示</p></li><li><p>Scale With Screen Size: 屏幕越大 UI 元素越大</p></li><li><p>Constant Physical Size: 保持默认的物理尺寸，如果屏幕大小改变，UI 元素不会改变</p><p>Reference Resolution: 参考分辨率<br>Screen Match Mode: 屏幕匹配模式<br>Match:<br>Refreence Pixels Per Unit: 参考每单位像素</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>优化，UGUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能优化-静态资源优化-音乐音效资源</title>
    <link href="/2025/05/12/Performance%20Optimization%20-%20Static%20Resource%20Optimization%20-%20Music%20and%20Sound%20Effect%20Resources/"/>
    <url>/2025/05/12/Performance%20Optimization%20-%20Static%20Resource%20Optimization%20-%20Music%20and%20Sound%20Effect%20Resources/</url>
    
    <content type="html"><![CDATA[<h2 id="音频声道"><a href="#音频声道" class="headerlink" title="音频声道"></a>音频声道</h2><p>如果音频为双声道音频且左右声道音频完全相同，可以启用 Force To Mono 强行将音频改为单声道音频<br><img src="/../images/Pastedimage20230616171545.png"></p><h2 id="音频采样率"><a href="#音频采样率" class="headerlink" title="音频采样率"></a>音频采样率</h2><p>移动平台建议 22050 Hz<br><img src="/../images/Pastedimage20230616182612.png"></p><h2 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h2><p><img src="/../images/Pastedimage20230616182806.png"><br>Decompress On Load：建议压缩后大小低于 200 kb 的音效文件<br>Compressed In Memory：大于 200kb<br>Streaming：较大文件，如背景音乐文件</p><h2 id="音频源源文件"><a href="#音频源源文件" class="headerlink" title="音频源源文件"></a>音频源源文件</h2><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>音频原始资源大小：<br>导入压缩后的大小：<br>压缩比：<br><img src="/../images/Pasted%20image%2020250520130914.png"><br>尽可能使用未压缩的 wav 音频源文件</p><h3 id="压缩方式"><a href="#压缩方式" class="headerlink" title="压缩方式"></a>压缩方式</h3><h2 id="Pasted-20image-2020250520130914-pngPasted-20image-2020250520131255-PCM：（Pulse-Code-Modulation）属于脉冲调制编码，它将模拟信号转换为数字信号，实质上没有经过编码，没有进行压缩，所以音质上属于完全无损的原始音频。而且相较于原生的模拟信号，它的抗干扰能力-Pasted-20image-2020250520130914-pngPasted-20image-2020250520131255强，保真效果更好。-Vorbis：（OGG-Vorbis）-类似于-MP3-格式，但这是一种免费开发的非商业压缩格式。属于有损压缩-ADPCM：（Adaptive-Differential-Pulse-Code-Modulation）-自适应差分脉冲编码调制。是一种基于-PCM-的优化压缩方式，但也属于有损压缩。"><a href="#Pasted-20image-2020250520130914-pngPasted-20image-2020250520131255-PCM：（Pulse-Code-Modulation）属于脉冲调制编码，它将模拟信号转换为数字信号，实质上没有经过编码，没有进行压缩，所以音质上属于完全无损的原始音频。而且相较于原生的模拟信号，它的抗干扰能力-Pasted-20image-2020250520130914-pngPasted-20image-2020250520131255强，保真效果更好。-Vorbis：（OGG-Vorbis）-类似于-MP3-格式，但这是一种免费开发的非商业压缩格式。属于有损压缩-ADPCM：（Adaptive-Differential-Pulse-Code-Modulation）-自适应差分脉冲编码调制。是一种基于-PCM-的优化压缩方式，但也属于有损压缩。" class="headerlink" title="&#x2F;Pasted%20image%2020250520130914.pngPasted%20image%2020250520131255- PCM：（Pulse-Code Modulation）属于脉冲调制编码，它将模拟信号转换为数字信号，实质上没有经过编码，没有进行压缩，所以音质上属于完全无损的原始音频。而且相较于原生的模拟信号，它的抗干扰能力&#x2F;Pasted%20image%2020250520130914.pngPasted%20image%2020250520131255强，保真效果更好。- Vorbis：（OGG Vorbis） 类似于 MP3 格式，但这是一种免费开发的非商业压缩格式。属于有损压缩- ADPCM：（Adaptive Differential Pulse Code Modulation） 自适应差分脉冲编码调制。是一种基于 PCM 的优化压缩方式，但也属于有损压缩。"></a><img src="/../images/Pasted%20image%2020250520131255.png"><br>&#x2F;Pasted%20image%2020250520130914.pngPasted%20image%2020250520131255- PCM：（Pulse-Code Modulation）属于脉冲调制编码，它将模拟信号转换为数字信号，实质上没有经过编码，没有进行压缩，所以音质上属于完全无损的原始音频。而且相较于原生的模拟信号，它的抗干扰能力&#x2F;Pasted%20image%2020250520130914.pngPasted%20image%2020250520131255强，保真效果更好。<br>- Vorbis：（OGG Vorbis） 类似于 MP3 格式，但这是一种免费开发的非商业压缩格式。属于有损压缩<br>- ADPCM：（Adaptive Differential Pulse Code Modulation） 自适应差分脉冲编码调制。是一种基于 PCM 的优化压缩方式，但也属于有损压缩。</h2><ol><li>安卓移动平台一般使用 Vorbis 模式</li><li>Ios 对 MP3 格式有优化</li></ol><h2 id="加载类型"><a href="#加载类型" class="headerlink" title="加载类型"></a>加载类型</h2><p><img src="/../images/Pasted%20image%2020250520131527.png"></p><ul><li>Decompress On Load: 音频文件以压缩形式存储在磁盘上，加载时直接解压放在内存中。这种方式在内存占用上没有优势，但在后续播放时对 CPU 的计算需求是最小的。一般来说这种方式更适合短小的音频</li><li>Compressed In Memory:音频文件以压缩形式存放在内存里，使用时再解压。这意味着会有更多的 CPU 开销，但是在加载速度和内存占用上具有优势。适用于</li><li>Streaming:音频文件存在放磁盘中，加载时循环以下操作：“从磁盘读取一部分 -》 解压 到内存中 -》 播放 -》 卸载”。这种方式在内存占用上相对而言是较小的，到那时在 CPU 消耗上不占优势<br>在音频的实际运用中，背景音乐的使用是普遍存在的。几乎所有游戏都会使用 BGM 以增强对游戏氛围和环境的渲染。结合以上关于音频加载方式的描述可以看出，采用 Streaming 方式去加载背景音乐，可以有效减少内存占用和加载时间，从而降低 Audio 资源对项目总体内存和加载时间的影响。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>音乐为性能瓶颈，优化音乐音效可以较少内存的使用和安装包大小。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>游戏需要静音时，建议将 AudioSource 组件卸载，而不是把音量降低为 0</p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软技能-代码之外的生存指南_其一</title>
    <link href="/2025/05/07/Soft_Skills_Beyond_Code_Chapter_1/"/>
    <url>/2025/05/07/Soft_Skills_Beyond_Code_Chapter_1/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/book.png"></p><h2 id="为什么这本书与其他软件相关书籍截然不同？"><a href="#为什么这本书与其他软件相关书籍截然不同？" class="headerlink" title="为什么这本书与其他软件相关书籍截然不同？"></a>为什么这本书与其他软件相关书籍截然不同？</h2><ol><li>多数软件开发的书籍都是有关于代码开发本身</li><li>本书主要解决“如何成为一名优秀的软件开发者”这个问题</li><li>本书讨论什么：<ul><li>关于你自己</li><li>作为一名软件开发者，如何超越编写代码本身</li></ul></li><li>本书不讨论什么：<ul><li>代码本身</li><li>代码的质量</li><li>代码的设计</li><li>…你能做什么</li></ul></li></ol><h2 id="篇章"><a href="#篇章" class="headerlink" title="篇章"></a>篇章</h2><ol><li>职业</li><li>自我营销</li><li>学习</li><li>生产力</li><li>理财</li><li>健身</li><li>心态</li></ol><h2 id="记忆点"><a href="#记忆点" class="headerlink" title="记忆点"></a>记忆点</h2><p><strong>想要成为优秀的人才？需要把重点放在“人”身上</strong></p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软技能代码之外的生存指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity网格重建</title>
    <link href="/2025/04/30/Unity_Mesh_Rebuild/"/>
    <url>/2025/04/30/Unity_Mesh_Rebuild/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是网格重建（Mesh-Rebuild）"><a href="#什么是网格重建（Mesh-Rebuild）" class="headerlink" title="什么是网格重建（Mesh Rebuild）"></a>什么是网格重建（Mesh Rebuild）</h2><p>在 UGUI 中，如果要渲染一个 UI 元素（Image，Text 等），需要经过 CPU 阶段将渲染所需要数据如：顶点，位置，纹理等信息传递给 GPU 进行渲染。在运行时，UI 元素外观或布局发生变化时，UGUI 会重新计算这些数据并传递给 GPU，这个过程称为网格重建（Mesh Rebuild）。</p><h2 id="为什么会造成网格重建"><a href="#为什么会造成网格重建" class="headerlink" title="为什么会造成网格重建"></a>为什么会造成网格重建</h2><p>每个 UI 元素会维护自己的 Mesh 信息，但是 Mesh 信息并不是实时更新的，Unity 在 UI 元素发生必须要重建 Mesh 信息的情况下才会进行网格重建。比如：</p><ul><li>文本内容修改：Text.text or TextMeshProUGUI.text 发生变化</li><li>图像资源修改：Image.sprite, RawImage.texture 发生变化</li><li>颜色修改：Image.color, Text.color 发生变化</li><li>…</li></ul><h2 id="如何避免或减少网格重建"><a href="#如何避免或减少网格重建" class="headerlink" title="如何避免或减少网格重建"></a>如何避免或减少网格重建</h2><ol><li>拆分 Canvas - 动静分离<br>例如一个 Image 元素在 Simple 模式下会创建四个顶点，如果我们有 100 个相同的这样的 Image，UGUI 底层(Native Code 部分)会将这 100 个 Image 的 Mesh 信息合并成一个大的 Mesh，用同一个 DrawCall 发送给 CPU。但是，UI 的 Mesh 信息相对于普通的 Mesh 来说有一个很大的不同，就是 UI 的 Mesh 信息是会变化的，而一旦某个 UI 元素的 Mesh 信息发生修改，那么和这个元素合并在一批的整个 Mesh 都会变成不可用。<br>如果将动态的 UI 元素单独分离到不同的 Canvas 中，由于 UGUI 渲染时以 Canvas 为单位的，那么这些动态的 UI 元素就不会影响到静态的 UI 元素了。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://dmstory.github.io/post/ugui-optimize-rebatch/">浅谈UGUI优化-网格合并</a><br><a href="https://dmstory.github.io/post/ugui-optimize-rebuild/">浅谈UGUI优化-网格重建</a><br><a href="https://www.xuanyusong.com/archives/4573">UGUI研究院之找到具体某个引起了网格重建的UI元素</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UGUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MCP踩坑记录-ServerMemory-无法指定json目录</title>
    <link href="/2025/03/16/MCP_ServerMemory_NoToolFound/"/>
    <url>/2025/03/16/MCP_ServerMemory_NoToolFound/</url>
    
    <content type="html"><![CDATA[<h2 id="server-memory-无法指定-json-目录"><a href="#server-memory-无法指定-json-目录" class="headerlink" title="server-memory 无法指定 json 目录"></a>server-memory 无法指定 json 目录</h2><p>官方示例中使用了 env 去设置运行目录，但是我一直没成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mcpServers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;memory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npx&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-y&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;@modelcontextprotocol/server-memory&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;MEMORY_FILE_PATH&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/path/to/custom/memory.json&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="解决记录"><a href="#解决记录" class="headerlink" title="解决记录"></a>解决记录</h4><p>找到 index.js 代码，让 ai 修改代码，把 json 目录改为可定义参数，使用命令行传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cmd /c npx @modelcontextprotocol/server-memory -p C:\Q5\Unity\Q5.json<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MCP踩坑记录-关于windows配置报错-NoToolFound</title>
    <link href="/2025/03/16/MCP_WIndows_NoToolFound/"/>
    <url>/2025/03/16/MCP_WIndows_NoToolFound/</url>
    
    <content type="html"><![CDATA[<p>在windows配置mcp出现的问题记录</p><h2 id="No-tool-found"><a href="#No-tool-found" class="headerlink" title="No tool  found"></a>No tool  found</h2><h3 id="官方使用方法"><a href="#官方使用方法" class="headerlink" title="官方使用方法"></a>官方使用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npx @modelcontextprotocol/server-memory<br></code></pre></td></tr></table></figure><h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h3><p>找到对应服务器的index.js,直接使用node运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">node C:\Users\user\AppData\Roaming\npm-cache\_npx\15b07286cbcc3329\node_modules\@modelcontextprotocol\server-memory\dist\index.js<br></code></pre></td></tr></table></figure><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h3><p>使用cmd调用到系统的npx命令，而不是编辑器中的环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cmd /c npx @modelcontextprotocol/server-memory<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重学C#-类型基础-所有的类型都从System.Object派生</title>
    <link href="/2025/03/16/All_types_derive_from_SystemObject/"/>
    <url>/2025/03/16/All_types_derive_from_SystemObject/</url>
    
    <content type="html"><![CDATA[<h2 id="所有的类型都从-System-Object-派生"><a href="#所有的类型都从-System-Object-派生" class="headerlink" title="所有的类型都从 System.Object 派生"></a>所有的类型都从 System.Object 派生</h2><p>“运行时”要求每个类型最终都从 System.Object 类型派生。<br>以下两个定义完全一致</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 隐式派生于 System.Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// 显式派生于 System.Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> : <span class="hljs-title">System.Object</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>由于所有的类型都从 System.Object 中派生，所以每个类型都保证了一组最基本的方法。</p><ol><li>公共方法<ul><li>Equals</li><li>GetHashCode</li><li>ToString</li><li>GetType</li></ul></li><li>收到保护方法<ul><li>MemberwiseClose</li><li>Finalize<br>CLR 要求所有的对象都用<b> new </b>操作符创建</li></ul></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">Employee e = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Parama&quot;</span>);<br></code></pre></td></tr></table></figure><p><b> new </b>操作符会做以下事情</p><ol><li>计算类型及其所有的基类（一直到 System.Object）和”同步块索引”.</li><li>从托管堆中分配类型所需要的字节数，从而分配对象的内存，分配的所有字节都设为 0</li><li>初始化对象的”类型对象指针” 和 “同步块索引” 成员</li><li>调用类型的实例构造器，传递在<b> new </b> 调用中指定的实参(上述中的 “Parama”)，每个类型的构造器负责初始化该类型定义的实例字段，最终调用 System.Object 的构造器(该构造器什么都不做，简单的返回)。<br><b>new</b> 执行了所有操作后，返回指向新建对象的一个引用（或指针）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透—基于frp实现远程桌面</title>
    <link href="/2024/10/30/frp_remote_desktop/"/>
    <url>/2024/10/30/frp_remote_desktop/</url>
    
    <content type="html"><![CDATA[<p><strong>要做好保护工作，有被入侵风险！！！！</strong><br><strong>要做好保护工作，有被入侵风险！！！！</strong><br><strong>要做好保护工作，有被入侵风险！！！！</strong>  </p><p><a href="https://starcheng.xyz/791.html">使用frp配置远程桌面</a><br><a href="https://www.anyviewer.cn/how-to/account-restrictions-are-preventing-this-user-from-signingin-2111.html">用户账户限制阻止登录解决</a><br><a href="https://www.anyviewer.cn/how-to/your-credentials-did-not-work-666.html">修复你的凭据不工作</a></p><p>连接时的用户名和密码是 电脑用户和锁屏密码。<br><strong>如果使用了微软账号登录，而非本地账户，使用电脑用户名和微软账号密码</strong></p>]]></content>
    
    
    <categories>
      
      <category>便捷工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>远程桌面</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim踩坑记录-E117</title>
    <link href="/2024/10/30/vim_E117/"/>
    <url>/2024/10/30/vim_E117/</url>
    
    <content type="html"><![CDATA[<p>最近刚换了新的电脑，在最初使用的时候也没有记录一下配置流程，所以遇到一些问题，这次统一记录一下。</p><h3 id="E117"><a href="#E117" class="headerlink" title="E117"></a>E117</h3><p>问题：在代码中有插件管理下载，但是 运行时报错”E117”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&quot; 安装 vim-plug 插件管理器<br>if empty(glob(&#x27;~/.vim/autoload/plug.vim&#x27;))c<br>  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<br>  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC<br>endif<br></code></pre></td></tr></table></figure><p>原因：网络问题，curl无法连接网络下载插件<br>解决方案：为curl添加网络代理，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">curl -x http://localhost:8080(代理地址) -fLo  ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一下最近面试,总结</title>
    <link href="/2024/08/08/Interview/"/>
    <url>/2024/08/08/Interview/</url>
    
    <content type="html"><![CDATA[<p>最近这段时间因为项目放缓了几个星期，就出去面试了三家吧，过了一家，寄掉两家。没面多少但还是记录记录吧。  </p><ol><li>对自己做过的功能其实还不够了解。<br>这个是有一家公司面试问了自己做过的一些功能，现场跟技术说怎么用 MVC 思想如何去设计，有什么函数，怎样的数结构。其实问的不算难，只是很多细节的考虑而已，功能自己是做过的，但是面试时还是很多点没说到。没说明白。因该是寄的原因。</li><li>对一些原理性的东西还不够了解，不明白为什么这么做。<br> 面试问题：在UI框架管理中，界面延时关闭是为了什么，界面频繁加载会导致什么消耗，为什么不能频繁加载界面。   </li><li>优化简历，学会说话，学会表达。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次低血糖感受</title>
    <link href="/2024/07/18/Low_Blood_Sugar/"/>
    <url>/2024/07/18/Low_Blood_Sugar/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起因是因为上一个星期去拔了一颗智齿，这周就过去拆线了。然后因为肉长到线上面去了。医生就用剪刀，镊子和钩子慢慢把肉剪开把线挑出来，给我疼傻了。</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>可能因为太疼了，自己一直紧绷着。在下椅子的时候已经开始感觉不对劲了。等医生开完账单后。就出去到牙科门口的椅子上坐着，做到椅子上时候眼睛已经开始看不清了。最开始是趴着的，能感觉到自己在慢慢恢复和发抖，然后过了一会，眼睛又开始看清了，就从趴着到坐着靠着后背，然后大概是因为血糖低引起的血压低，从趴着到坐着供血开始不足。幸运的是旁边的姐姐看到了，叫了医生，医生拿了葡萄糖喝完之后就好了。</p><p>已经开始记忆不清淅了，记得在喝葡萄糖的时候医生递给我，我记得当时眼睛是睁开的，但是只能看到白茫茫一片。疯狂的感受自己流出的冷汗。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>其实不是第一次低血糖，导致的这些了。以前在学校晕过一次，还有一次在地铁站，刚好在商店旁买了糖水。所以要么是毫无意识，要么是快速恢复了。第一次感受的这么贴切。</p><p>谢谢坐我隔壁的姐姐，谢谢医生。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
